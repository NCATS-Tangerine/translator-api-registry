openapi: 3.0.0
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: Documentation of the UBERON query web services.
  termsOfService: https://biothings.io/about
  title: UBERON Ontology API
  version: '1.0'
  x-translator:
    infores: "infores:biothings-uberon-ontology"
    component: KP
    team:
      - Service Provider
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/uberon
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/uberon
  x-maturity: production
tags:
- name: anatomy
- name: query
- name: translator
- name: biothings
paths:
  /anatomy:
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple UBERON anatomy IDs separated by comma. Note
                    that currently we only take the input ids up to 1000 maximum,
                    the rest will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Phenotype'
                type: array
          description: A list of matching anatomy objects
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: For a list of anatomy IDs, return the matching anatomy object
      tags:
      - anatomy
  /anatomy/{anatomyid}:
    get:
      parameters:
      - description: Retrieve anatomy objects based on UBERON anatomy ID  Supports
          JSONP and CORS as well.
        example: UBERON:2002108
        in: path
        name: anatomyid
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phenotype'
          description: A matching anatomy object
        '404':
          description: A response indicating an unknown anatomy ID
      summary: Retrieve anatomy objects based on ID
      tags:
      - anatomy
  /metadata:
    get:
      parameters:
      - $ref: '#/components/parameters/callback'
        in: query
        name: callback
      responses:
        '200':
          description: UBERON metadata object
      summary: Get metadata about the data available from UBERON
      tags:
      - metadata
  /metadata/fields:
    get:
      parameters:
      - $ref: '#/components/parameters/search'
        name: search
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/prefix'
        name: prefix
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          description: UBERON metadata fields object
      summary: Get metadata about the data fields available
        object
      tags:
      - metadata
  /query:
    get:
      parameters:
      - description: Query string.
        example: parents:"UBERON:2001995"
        in: query
        name: q
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/facet_size'
        name: facet_size
      - $ref: '#/components/parameters/sort'
        name: sort
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/facets'
        name: facets
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/from'
        name: from
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make queries and return matching anatomy hits. Supports JSONP and CORS
        as well.
      tags:
      - query
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryPOSTResult'
          description: Query response objects with the "hits" propert
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make batch anatomy queries and return matching anatomy hits
      tags:
      - query
      x-bte-kgs-operations:
      - $ref: '#/components/x-bte-kgs-operations/has_subclass'
      - $ref: '#/components/x-bte-kgs-operations/subclass_of'
      - $ref: '#/components/x-bte-kgs-operations/part_of'
      - $ref: '#/components/x-bte-kgs-operations/has_part'
      - $ref: '#/components/x-bte-kgs-operations/develops_from'
      - $ref: '#/components/x-bte-kgs-operations/located_in'
      - $ref: '#/components/x-bte-kgs-operations/location_of'
      - $ref: '#/components/x-bte-kgs-operations/produced_by'
      - $ref: '#/components/x-bte-kgs-operations/produces'
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned chem object. If "true" or "1",
        all fields will be collapsed into a single level deep object (all nested objects
        will be a single level deep, using dotfield notation to signify the nested
        structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching chem hit(s). The supported field
        names can be found from any chem object or from the /metadata/fields endpoint.
        If "fields=all", all available fields will be returned. Type: string (list).
        Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching chem hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching chem hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    Phenotype:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - $ref: '#/components/schemas/Phenotype'
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            $ref: '#/components/schemas/Phenotype'
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-kgs-operations:
    ## not commenting out this set of subclass relationships
    ##   because automatic ID/node-expansion doesn't cover UBERON yet
    has_subclass:
    - inputSeparator: ','
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: children
      predicate: superclass_of  ## this is the inverse of subclass_of right now
      requestBody:
        body:
          q: '{inputs[0]}'
          scopes: _id
        header: application/x-www-form-urlencoded
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_subclass'
      source: "infores:uberon"
      supportBatch: true
    subclass_of:
    - inputSeparator: ','
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: parents
      predicate: subclass_of
      requestBody:
        body:
          q: '{inputs[0]}'
          scopes: _id
        header: application/x-www-form-urlencoded
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/subclass_of'
      source: "infores:uberon"
      supportBatch: true
    part_of:
    - inputSeparator: ','
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: part_of.uberon
      predicate: part_of
      requestBody:
        body:
          q: '{inputs[0]}'
          scopes: _id
        header: application/x-www-form-urlencoded
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/part_of'
      source: "infores:uberon"
      supportBatch: true
    has_part:
    - inputSeparator: ','
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id
      predicate: has_part
      requestBody:
        body:
          q: '{inputs[0]}'
          scopes: part_of.uberon
        header: application/x-www-form-urlencoded
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_part'
      source: "infores:uberon"
      supportBatch: true
    produces:
    - inputSeparator: ','
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id
      predicate: produces
      requestBody:
        body:
          q: '{inputs[0]}'
          scopes: produced_by.uberon
        header: application/x-www-form-urlencoded
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/produces'
      source: "infores:uberon"
      supportBatch: true
    produced_by:
    - inputSeparator: ','
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: produced_by.uberon
      predicate: produced_by
      requestBody:
        body:
          q: '{inputs[0]}'
          scopes: _id
        header: application/x-www-form-urlencoded
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/produced_by'
      source: "infores:uberon"
      supportBatch: true
    located_in:
    - inputSeparator: ','
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: located_in.uberon
      predicate: located_in
      requestBody:
        body:
          q: '{inputs[0]}'
          scopes: _id
        header: application/x-www-form-urlencoded
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/located_in'
      source: "infores:uberon"
      supportBatch: true
    location_of:
    - inputSeparator: ','
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: location_of.uberon
      predicate: location_of
      requestBody:
        body:
          q: '{inputs[0]}'
          scopes: _id
        header: application/x-www-form-urlencoded
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/location_of'
      source: "infores:uberon"
      supportBatch: true
    develops_from:
    - inputSeparator: ','
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: develops_from.uberon
      predicate: develops_from
      requestBody:
        body:
          q: '{inputs[0]}'
          scopes: _id
        header: application/x-www-form-urlencoded
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/develops_from'
      source: "infores:uberon"
      supportBatch: true
  x-bte-response-mapping:
    has_subclass:
      UBERON: children
    subclass_of:
      UBERON: parents
    part_of:
      UBERON: part_of.uberon
    has_part:
      UBERON: _id
    develops_from:
      UBERON: develops_from.uberon
    location_of:
      UBERON: location_of.uberon
    located_in:
      UBERON: located_in.uberon
    produced_by:
      UBERON: produced_by.uberon
    produces:
      UBERON: _id
