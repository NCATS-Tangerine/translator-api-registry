openapi: 3.0.3

info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible organization
  description: >-
    Documentation of the BioThings API for [PubTator 3.0](https://www.ncbi.nlm.nih.gov/research/pubtator3/) data.
    PubTator 3.0 provides automated literature annotation with biomedical entities including genes, diseases, chemicals, species,
    and mutations from PubMed abstracts and PMC full-text articles. This API enables access to literature-based associations
    between biomedical entities, supporting literature mining, knowledge discovery, and evidence-based biomedical research.
  termsOfService: https://biothings.io/about
  title: BioThings PubTator3 API
  version: '2024-05-14'
  x-implementationLanguage: Python
  x-translator:
    component: KP
    team:
    - "Service Provider"

servers:
- url: https://biothings.ncats.io/pubtator3
  description: Production server
  x-maturity: production
- url: https://biothings.test.transltr.io/pubtator3
  description: ITRB Test server
  x-maturity: testing
- url: https://biothings.ci.transltr.io/pubtator3
  description: ITRB Staging server
  x-maturity: staging

tags:
- name: association
- name: query
- name: translator
- name: biothings
- name: literature
- name: annotation

paths:
  "/association/{id}":
    get:
      description: >-
        By default, the full record for each ID is returned in JSON. Invalid input returns a 404 (Not Found). Use
        the 'fields' parameter to return specific attributes (comma-separated, case-sensitive). Unavailable attributes are
        ignored. You can also use the 'callback' parameter for JSONP requests.
      parameters:
      - name: id
        in: path
        required: true
        example: "pmid:11869268"
        schema:
          type: string
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/email'
      - $ref: '#/components/parameters/size'
      responses:
        '200':
          description: >-
            A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - "association"
  "/association":
    post:
      description: To fetch multiple items in one request, use a batch query with POST.
      parameters:
      - name: ids
        description: >-
          |-
          Accepts multiple IDs separated by commas. Note that currently we only take ids up to 1000 maximum, the rest will be omitted.

          The request body can also be used to provide these ids.
        in: query
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/email'
      - $ref: '#/components/parameters/size'
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "19705617-Chemical|MESH:D008055-CAUSE-Disease|MESH:"
              - "19705617-Chemical|MESH:D008055-CAUSE-Disease|MESH:_2"
            schema:
              type: object
              properties:
                ids:
                  description: >-
                    Accepts multiple IDs. Note that currently we only take the input ids up to 1000 maximum, the
                    rest will be omitted.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: >-
            A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - "association"
  "/metadata":
    get:
      description: Get metadata about the BioThings PUBTATOR3 data available from the API
      responses:
        '200':
          description: >-
            A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - "metadata"
  "/metadata/fields":
    get:
      description: Get metadata about the BioThings PUBTATOR3 data fields available from the API
      responses:
        '200':
          description: >-
            A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - "metadata"
  "/query":
    get:
      description: >-
        Query service for BioThings PubTator3. In the output, "total" gives the total number of matching hits,
        while the actual hits are returned under "hits" field.
      parameters:
      - name: q
        description: >-
          'Required, passing user query. Example: ''Search for literature annotations containing BRCA1''. The detailed
          query syntax is explained [here for a core BioThings API](https://docs.mychem.info/en/latest/doc/chem_query_service.html#query-syntax).'
        in: query
        required: true
        example: "pmid:33100902"
        schema:
          type: string
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/size'
      - $ref: '#/components/parameters/from'
      - $ref: '#/components/parameters/fetch_all'
      - $ref: '#/components/parameters/scroll_id'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/facets'
      - $ref: '#/components/parameters/facet_size'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/dotfield'
      - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: >-
            A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - "query"
    post:
      description: >-
        To fetch multiple items in one request, use a batch query with POST. The "query" field in the returned
        object indicates the matching query term. If a query term has no match, it will return with a "notfound" field with
        the value "true".
      parameters:
      - name: q
        description: >-
          |-
          Accepts multiple values separated by commas. Note that currently we only take the input values up to 1000 maximum, the rest will be omitted.

          The request body can also be used to provide these values.
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        description: >-
          |-
          Optional, specify one or more fields (separated by commas) to search. Default: _id

          The request body can also be used to provide this information.
        in: query
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/email'
      - $ref: '#/components/parameters/size'
      - $ref: '#/components/parameters/from'
      - $ref: '#/components/parameters/fetch_all'
      - $ref: '#/components/parameters/scroll_id'
      requestBody:
        content:
          application/json:
            example:
              q:
              - "18625869"
              - "2861890"
              scopes:
              - "pmid"
            schema:
              type: object
              properties:
                q:
                  description: >-
                    Accepts multiple values separated by commas. Note that currently we only take the input values
                    up to 1000 maximum, the rest will be omitted.
                  type: array
                  items:
                    type: string
                scopes:
                  description: 'Specify one or more fields (separated by commas) to search. Default: _id'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: >-
            A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - "query"

components:
  parameters:
    callback:
      name: callback
      description: Optional, you can pass a "callback" parameter to make a JSONP call.
      in: query
      required: false
      schema:
        type: string
    dotfield:
      name: dotfield
      description: >-
        'Optional, can be used to control the format of the returned object. If "dotfield" is true, the returned
        data object is returned flattened (no nested objects) using dotfield notation for key names. Default: false.'
      in: query
      required: false
      schema:
        type: boolean
        default: false
    email:
      name: email
      description: >-
        Optional, if you are regular users of our services, we encourage you to provide us an email, so that we
        can better track the usage or follow up with you.
      in: query
      required: false
      schema:
        type: string
    facet_size:
      name: facet_size
      description: >-
        Optional, an integer (1 <= facet_size <= 1000) that specifies how many buckets to return in a faceted query.
      in: query
      required: false
      schema:
        type: integer
        default: 10
    facets:
      name: facets
      description: >-
        Optional, a single field or comma-separated fields to return facets, can only be used on non-free text
        fields. See examples of faceted queries for a core BioThings API.
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    fetch_all:
      name: fetch_all
      description: >-
        'Optional, a boolean, which when TRUE, allows fast retrieval of all unsorted query hits. The return object
        contains a _scroll_id field, which when passed as a parameter to the query endpoint returns the next 1000 query results.
        Setting fetch_all = TRUE causes the results to be inherently unsorted, therefore the sort parameter is ignored. Default:
        FALSE.'
      in: query
      required: false
      schema:
        type: boolean
        default: false
    fields:
      name: fields
      description: >-
        'Optional, can be a comma-separated list to limit the fields returned from the object. If "fields=all",
        all available fields will be returned. Note that it supports dot notation as well. Default: "fields=all". The parameter
        "filter" is an alias for this parameter.'
      in: query
      required: false
      schema:
        type: string
        default: all
    from:
      name: from
      description: 'Optional, the number of matching hits to skip, starting from 0. Default: 0.'
      in: query
      required: false
      schema:
        type: integer
        default: 0
    scroll_id:
      name: scroll_id
      description: >-
        Optional, a string containing the _scroll_id returned from a query request with fetch_all = TRUE. Supplying
        a valid scroll_id will return the next 1000 unordered results. If the next results are not obtained within 1 minute
        of the previous set of results, the scroll_id becomes stale, and a new one must be obtained with another query request
        with fetch_all = TRUE.
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: >-
        'Optional, the maximum number of matching hits to return (with a cap of 1000 at the moment). Default: 10.
        The combination of "size" and "from" parameters can be used to get paging for a large query.'
      in: query
      required: false
      schema:
        type: integer
        default: 10
    sort:
      name: sort
      description: >-
        'Optional, the comma-separated fields to sort on. Prefix with "-" for descending order, otherwise in ascending
        order. Default: sort by matching scores in descending order.'
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
