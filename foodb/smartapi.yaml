openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: >-
    Documentation of the Foodb (https://github.com/yichuanma95/foodb_json)
    query web services.
  termsOfService: https://biothings.io/about
  title: BioThings Foodb API
  version: '2022-04-07'
  x-translator:
    infores: "infores:biothings-foodb"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.13"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/foodb
  x-maturity: production
- description: Production server
  url: https://biothings.ncats.io/foodb
  x-maturity: production
tags:
- name: biothings
- name: query
- name: translator
- name: food
paths:
  "/food/{id}":
    get:
      parameters:
      - name: id
        in: path
        required: true
        example: "FOOD00967"
        schema:
          type: string
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: "Success"
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Association'
      #   '404':
      #     description: A response indicating an unknown association ID
      summary: >-
        Retrieve food based on ID
      tags:
      - food
  "/food":
    post:
      parameters:
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "FOOD00967"
              - "FOOD00944"
            schema:
              type: object
              properties:
                ids:
                  description: 'multiple Food IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "Success"
      summary: >-
        Retrieve multiple foods' information based on ID
      tags:
      - food
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/dev"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/search"
      - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data fields available from a record
      tags:
      - metadata
"/query":
  get:
    parameters:
    - name: q
      description: Query string.
      in: query
      required: true
      example: "food_group:Vegetables"
      schema:
        type: string
    - "$ref": "#/components/parameters/aggs"
    - "$ref": "#/components/parameters/facet_size"
    - "$ref": "#/components/parameters/from"
    - "$ref": "#/components/parameters/userquery"
    - "$ref": "#/components/parameters/sort"
    - "$ref": "#/components/parameters/explain"
    - "$ref": "#/components/parameters/fetch_all"
    - "$ref": "#/components/parameters/scroll_id"
    - "$ref": "#/components/parameters/raw"
    - "$ref": "#/components/parameters/rawquery"
    - "$ref": "#/components/parameters/_source"
    - "$ref": "#/components/parameters/size"
    - "$ref": "#/components/parameters/dotfield"
    - "$ref": "#/components/parameters/_sorted"
    - "$ref": "#/components/parameters/always_list"
    - "$ref": "#/components/parameters/allow_null"
    - "$ref": "#/components/parameters/format"
    responses:
      '200':
        description: Success
    #     content:
    #       application/json:
    #         schema:
    #           "$ref": "#/components/schemas/QueryResult"
    #   '400':
    #     content:
    #       application/json:
    #         schema:
    #           "$ref": "#/components/schemas/ErrorResult"
    #     description: A response indicating an improperly formatted query
    # summary: Make queries and return matching gene hits. Supports JSONP and CORS
    #   as well.
    tags:
    - query
  post:
    parameters:
    - name: q
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    - name: scopes
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          default:
          - _id
    - "$ref": "#/components/parameters/from"
    - "$ref": "#/components/parameters/sort"
    - "$ref": "#/components/parameters/raw"
    - "$ref": "#/components/parameters/rawquery"
    - "$ref": "#/components/parameters/_source"
    - "$ref": "#/components/parameters/size"
    - "$ref": "#/components/parameters/dotfield"
    - "$ref": "#/components/parameters/_sorted"
    - "$ref": "#/components/parameters/always_list"
    - "$ref": "#/components/parameters/allow_null"
    - "$ref": "#/components/parameters/format"
    requestBody:
      content:
        application/json:
          example:
            q:
            - "Vegetables"
            - "Fruits"
            scopes:
            - "food_group"
          schema:
            type: object
            properties:
              q:
                type: array
                items:
                  type: string
              scopes:
                type: array
                items:
                  type: string
              from:
                type: integer
              sort:
                type: array
                items:
                  type: string
    responses:
      '200':
        description: Success
    #     content:
    #       application/json:
    #         schema:
    #           "$ref": "#/components/schemas/QueryPOSTResult"
    #   '400':
    #     content:
    #       application/json:
    #         schema:
    #           "$ref": "#/components/schemas/ErrorResult"
    #     description: A response indicating an improperly formatted query
    # summary: Make batch gene queries and return matching gene hits
    tags:
    - query
    x-bte-kgs-operations:
    # TODO
components:
  parameters:
    _sorted:
      name: _sorted
      in: query
      required: false
      schema:
        type: boolean
        default: true
    _source:
      name: _source
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    aggs:
      name: aggs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    allow_null:
      name: allow_null
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    always_list:
      name: always_list
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    dev:
      name: dev
      in: query
      required: false
      schema:
        type: boolean
    dotfield:
      name: dotfield
      in: query
      required: false
      schema:
        type: boolean
    explain:
      name: explain
      in: query
      required: false
      schema:
        type: boolean
    facet_size:
      name: facet_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    fetch_all:
      name: fetch_all
      in: query
      required: false
      schema:
        type: boolean
    format:
      name: format
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      required: false
      schema:
        type: string
        default: json
    from:
      name: from
      in: query
      required: false
      schema:
        type: integer
    prefix:
      name: prefix
      in: query
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      required: false
      schema:
        type: boolean
    rawquery:
      name: rawquery
      in: query
      required: false
      schema:
        type: boolean
    scroll_id:
      name: scroll_id
      in: query
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: "default: 10 objects/records in response"
      in: query
      required: false
      schema:
        type: integer
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    userquery:
      name: userquery
      in: query
      required: false
      schema:
        type: string
