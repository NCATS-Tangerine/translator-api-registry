openapi: 3.0.3
info: 
  contact: 
    email: help@mygene.info
    name: Chunlei Wu
    x-id: https://github.com/newgene
    x-role: responsible developer
  description: Documentation of the MyGene.info Gene Query web services. Learn more about [MyGene.info](https://docs.mygene.info/en/latest/index.html)
  termsOfService: "http://mygene.info/terms/"
  title: MyGene.info API
  version: "3.0"
  x-translator: 
    infores: "infores:mygene-info"
    component: KP
    team: 
      - "Service Provider"
    biolink-version: "3.1.1"
servers: 
  - description: Encrypted Production server
    url: https://mygene.info/v3
    x-maturity: production
  - description: Production server
    url: http://mygene.info/v3
    x-maturity: production
tags: 
  - name: gene
  - name: annotation
  - name: query
  - name: translator
  - name: biothings
paths:
  "/gene/{id}":
    get:
      description: >-
        By default, this will return the complete gene annotation object in JSON format. 
        See [here](https://docs.mygene.info/en/latest/doc/annotation_service.html#returned-object) 
        for an example and [here](https://docs.mygene.info/en/latest/doc/data.html#gene-object)
        for more details. If the input gene ID is not valid, 404 (NOT FOUND) will be returned.
        

        Optionally, you can pass a "fields" parameter to return only the annotation you want 
        (by filtering returned object fields). "fields" accepts any attributes (a.k.a fields) available 
        from the gene object. Multiple attributes should be separated by commas. If an attribute is not 
        available for a specific gene object, it will be ignored. Note that the attribute names are 
        case-sensitive.


        Just like the gene query service, you can also pass a "callback" parameter to make a JSONP call.
      parameters:
      ## these are provided in the docs https://docs.mygene.info/en/latest/doc/annotation_service.html
      - name: id
        description: >-
          Entrez ("1017") or Ensembl gene id ("ENSG00000123374"). A retired Entrez Gene id works too if it is 
          replaced by a new one, e.g., 245794. But a "discontinued" gene id will not return any hit, e.g., 138.
        in: path
        required: true
        example: "1017"
        schema:
          type: string
      ## species, species_facet_filter are special parameters for MyGene
      - "$ref": "#/components/parameters/species"
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/callback"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      ## these are noted in the https://mygene.info/v3/spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/species_facet_filter"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      responses:
        '200':
          ## description from https://docs.mygene.info/en/latest/doc/response_status_codes.html
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Chem'
      #   '404':
      #     description: A response indicating an unknown chemical ID
      tags:
      - gene
  "/gene":
    post:
      description: >-
        Although making simple GET requests above to our gene query service is sufficient in most use cases, 
        there are some times you might find it easier to batch query (e.g., retrieving gene annotations for 
        multiple genes). Fortunately, you can also make batch queries via POST requests when you need to.
      parameters:
      ## these are provided in the docs https://docs.mygene.info/en/latest/doc/chem_annotation_service.html
      - name: ids
        description: >-
          Accept multiple geneids (either Entrez or Ensembl gene ids) seperated by comma, e.g., 
          "ids=1017,1018" or "ids=695,ENSG00000123374".
          Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.


          The request body can also be used to provide these ids.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/species"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      ## these are noted in the https://mygene.info/v3/spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/species_facet_filter"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "1017"
              - "1018"
            schema:
              type: object
              properties:
                ids:
                  description: >-
                    Accepts multiple gene ids. Note that currently we only take the input ids 
                    up to 1000 maximum, the rest will be omitted.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - gene
  "/metadata":
    get:
      description: Get metadata about the data available from the API
      ## these are noted in the https://mygene.info/v3/spec endpoint; commenting out for now
      # parameters:
      # - "$ref": "#/components/parameters/format"
      # - "$ref": "#/components/parameters/raw"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - metadata
  "/metadata/fields":
    get:
      description: Get metadata about the data fields available from the API
      ## these are noted in the https://mygene.info/v3/spec endpoint; commenting out for now
      # parameters:
      # - "$ref": "#/components/parameters/format"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/search"
      # - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - metadata
  "/query":
    get:
      description: >-
        MyGene.info chemical query web service. In the output, "total" in the output gives the total number 
        of matching hits, while the actual hits are returned under "hits" field.
      parameters:
      - name: q
        ## description partially from https://docs.mygene.info/en/latest/doc/query_service.html#query-syntax
        description: >-
          Required, passing user query. The detailed query syntax for parameter is explained 
          [here](https://docs.mygene.info/en/latest/doc/query_service.html#query-syntax).
        in: query
        required: true
        example: CDK2
        schema:
          type: string
      ## species, species_facet_filter, entrezonly, ensemblonly,
      ##   exists, missing, post_filter, include_tax_tree
      ##   are special parameters for MyGene
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/species"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/facets"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/species_facet_filter"
      - "$ref": "#/components/parameters/entrezonly"
      - "$ref": "#/components/parameters/ensemblonly"
      - "$ref": "#/components/parameters/callback"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/email"
      ## these are noted in the https://mygene.info/v3/spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/exists"
      # - "$ref": "#/components/parameters/missing"
      # - "$ref": "#/components/parameters/post_filter"
      # - "$ref": "#/components/parameters/include_tax_tree"
      # - "$ref": "#/components/parameters/aggs"
      # - "$ref": "#/components/parameters/userquery"
      # - "$ref": "#/components/parameters/explain"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # description: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post: 
      description: >-
        Although making simple GET requests above to our chemical query service is sufficient for most use cases, 
        there are times you might find it more efficient to make batch queries (e.g., retrieving gene annotation 
        for multiple genes). Fortunately, you can also make batch queries via POST requests when you need to.


        The "query" field in the returned object indicates the matching query term. If a query term has no match, 
        it will return with a "notfound" field with the value "true".
      parameters:
      ## these are provided in the docs https://docs.mygene.info/en/latest/doc/query_service.html#batch-queries-via-post
      - name: q
        description: >-
          Accepts multiple values separated by commas. Note that currently we only take the input values up to 1000 
          maximum, the rest will be omitted.


          The request body can also be used to provide these ids.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        description: >-
          Optional, specify one or more fields (separated by commas) to search. 
          The available "fields" can be passed to "scopes" parameter are listed 
          [here](https://docs.mygene.info/en/latest/doc/data.html#available-fields). Default: _id


          The request body can also be used to provide this information.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: string
      ## species, species_facet_filter, entrezonly, ensemblonly,
      ##   exists, missing, post_filter, include_tax_tree
      ##   are special parameters for MyGene
      - "$ref": "#/components/parameters/species"
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/email"
      ## these aren't noted in the docs for POST, but they are in GET or are useful
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/facets"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/species_facet_filter"
      - "$ref": "#/components/parameters/entrezonly"
      - "$ref": "#/components/parameters/ensemblonly"
      - "$ref": "#/components/parameters/callback"
      ## these are noted in the https://mygene.info/v3/spec endpoint; commenting out for now
      ##   others haven't been written down here: with_total, analyzer
      # - "$ref": "#/components/parameters/exists"
      # - "$ref": "#/components/parameters/missing"
      # - "$ref": "#/components/parameters/post_filter"
      # - "$ref": "#/components/parameters/include_tax_tree"
      # - "$ref": "#/components/parameters/aggs"
      # - "$ref": "#/components/parameters/userquery"
      # - "$ref": "#/components/parameters/explain"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format
      requestBody:
        content:
          application/json:
            example:
              q:
              - "1017"
              - "1018"
              scopes:
              - "entrezgene"
            schema:
              type: object
              properties:
                q:
                  description: >-
                    Accepts multiple values separated by commas. Note that currently we only take the input values 
                    up to 1000 maximum, the rest will be omitted.
                  type: array
                  items:
                    type: string
                scopes:
                  description: >-
                    Specify one or more fields (separated by commas) to search. 
                    The available "fields" can be passed to "scopes" parameter are listed 
                    [here](https://docs.mygene.info/en/latest/doc/data.html#available-fields). Default: _id
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # description: Make batch gene queries and return matching gene hits
      tags:
      - query
      ## 18 operations (9 sets)
      x-bte-kgs-operations: 
        - $ref: "#/components/x-bte-kgs-operations/PathwayHasGene1"
        - $ref: "#/components/x-bte-kgs-operations/PathwayHasGene2"
        - $ref: "#/components/x-bte-kgs-operations/PathwayHasGene3"
        - $ref: "#/components/x-bte-kgs-operations/PathwayHasGene4"
        - $ref: "#/components/x-bte-kgs-operations/involvedInPathway1"
        - $ref: "#/components/x-bte-kgs-operations/involvedInPathway2"
        - $ref: "#/components/x-bte-kgs-operations/involvedInPathway3"
        - $ref: "#/components/x-bte-kgs-operations/involvedInPathway4"
        - $ref: "#/components/x-bte-kgs-operations/involvedInBP"
        - $ref: "#/components/x-bte-kgs-operations/BPToGene"
        - $ref: "#/components/x-bte-kgs-operations/enablesMF"
        - $ref: "#/components/x-bte-kgs-operations/MFToGene"
        - $ref: "#/components/x-bte-kgs-operations/involvedInCC"
        - $ref: "#/components/x-bte-kgs-operations/CCToGene"
        - $ref: "#/components/x-bte-kgs-operations/geneToDisease"
        - $ref: "#/components/x-bte-kgs-operations/diseaseToGene"
        - $ref: "#/components/x-bte-kgs-operations/hasHomolog-MGI"
        - $ref: "#/components/x-bte-kgs-operations/hasHomolog-MGI-rev"
components: 
  parameters: 
    ## these are specific to MyGene
    ensemblonly: 
      name: ensemblonly
      description: >-
        Optional. When passed as “true” or “1”, the query returns only the hits with valid Ensembl gene ids. Default: false.
      in: query
      schema: 
        type: boolean
        default: false
    entrezonly: 
      name: entrezonly
      description: >-
        Optional. When passed as “true” or “1”, the query returns only the hits with valid Entrez gene ids. Default: false.
      in: query
      schema: 
        type: boolean
        default: false
    species: 
      name: species
      description: >-
        Optional, can be used to limit the gene hits from given species. 
        You can use "common names" for nine common species (human, mouse, 
        rat, fruitfly, nematode, zebrafish, thale-cress, frog and pig). 
        All other species, you can provide their taxonomy ids from 
        [NCBI Taxonomy](https://www.ncbi.nlm.nih.gov/taxonomy). See more details 
        [here](https://docs.mygene.info/en/latest/doc/data.html#species). 
        Multiple species can be passed using comma as a separator. Passing "all" will 
        query against all available species. Default: all.
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          default: all
    species_facet_filter: 
      name: species_facet_filter
      description: >-
        Optional, relevant when faceting on species (i.e., "facets=taxid" are passed). 
        It's used to pass species filter without changing the scope of faceting, 
        so that the returned facet counts won't change. Either species name or taxonomy id 
        can be used, just like "species" parameter above. See examples of faceted queries 
        [here](https://docs.mygene.info/en/latest/doc/query_service.html#faceted-queries).
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    ## these are specific to MyGene, but only noted in the https://mychem.info/v1/spec endpoint; commenting out for now
    # exists: 
    #   name: exists
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # include_tax_tree: 
    #   name: include_tax_tree
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # missing: 
    #   name: missing
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # post_filter: 
    #   name: post_filter
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    callback:
      name: callback
      description: >-
        Optional, you can pass a "callback" parameter to make a JSONP call.
      in: query
      required: false
      schema:
        type: string
    dotfield:
      name: dotfield
      description: >-
        Optional, can be used to control the format of the returned chemical object. 
        If "dotfield" is true, the returned data object is returned flattened (no nested objects) 
        using dotfield notation for key names. Default: false.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    email:
      name: email
      description: >-
        Optional, if you are regular users of our services, we encourage you to provide us an email, 
        so that we can better track the usage or follow up with you.
      in: query
      required: false
      schema:
        type: string
    facet_size:
      name: facet_size
      description: >-
        Optional, an integer (1 <= facet_size <= 1000) that specifies how many buckets to return in a 
        [faceted query](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#faceted-queries).
      in: query
      required: false
      schema:
        type: integer
        default: 10
    facets:
      name: facets
      description: >-
        Optional, a single field or comma-separated fields to return facets, can only be used on non-free text fields. 
        E.g. "facets=chembl.molecule_properties.full_mwt". See [examples of faceted queries 
        here](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#faceted-queries).
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    fetch_all:
      name: fetch_all
      description: >-
        Optional, a boolean, which when TRUE, allows fast retrieval of all unsorted query hits. 
        The return object contains a _scroll_id field, which when passed as a parameter to the query endpoint 
        (see the scroll_id parameter), returns the next 1000 query results. Setting fetch_all = TRUE causes 
        the results to be inherently unsorted, therefore the sort parameter is ignored. For more information, 
        see [examples using fetch_all 
        here](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#scrolling-queries). 
        Default: FALSE.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    fields:
      name: fields
      description: >-
        Optional, can be a comma-separated list to limit the fields returned from the chemical object. 
        If "fields=all", all available fields will be returned. Look 
        [here](https://docs.mychem.info/en/latest/doc/data.html#available-fields) for a list of available fields. 
        

        Note that it supports dot notation as well, e.g., you can pass "chebi.name". 
        Default: "fields=all". 
        The parameter "filter" is an alias for this parameter.
      in: query
      required: false
      schema:
        type: string
        default: all
    from:
      name: from
      description: >-
        Optional, the number of matching chemical hits to skip, starting from 0. Default: 0. 
      in: query
      required: false
      schema:
        type: integer
        default: 0
    scroll_id:
      name: scroll_id
      description: >-
        Optional, a string containing the _scroll_id returned from a query request with fetch_all = TRUE. 
        Supplying a valid scroll_id will return the next 1000 unordered results. If the next results are 
        not obtained within 1 minute of the previous set of results, the scroll_id becomes stale, and a 
        new one must be obtained with another query request with fetch_all = TRUE. All other parameters are 
        ignored when the scroll_id parameter is supplied. For more information see [examples using scroll_id 
        here](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#scrolling-queries).
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: >-
        Optional, the maximum number of matching chemical hits to return (with a cap of 1000 at the moment). Default: 10.
        The combination of "size" and "from" parameters can be used to get paging for a large query.
      in: query
      required: false
      schema:
        type: integer
        default: 10
    sort:
      name: sort
      description: >-
        Optional, the comma-separated fields to sort on. Prefix with "-" for descending order, otherwise in ascending order. 
        Default: sort by matching scores in descending order.
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
    # _sorted:
    #   name: _sorted
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    #     default: true
    # aggs:
    #   name: aggs
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # allow_null:
    #   name: allow_null
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # always_list:
    #   name: always_list
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # explain:
    #   name: explain
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # format:
    #   name: format
    #   description: 'controls output format of server response, currently supports:
    #     "json", "jsonld", "html". Type: string. Default: json.'
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    #     default: json
    # prefix:
    #   name: prefix
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    # raw:
    #   name: raw
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # rawquery:
    #   name: rawquery
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # search:
    #   name: search
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    # userquery:
    #   name: userquery
    #   in: query
    #   required: false
    #   schema:
    #     type: string
  # schemas:
  #   Chem:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - "$ref": "#/components/schemas/Chem"
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           "$ref": "#/components/schemas/Chem"
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations: 
  ## notes:
  ## - not including Gene <-> Transcript <-> Protein or Gene <-> Protein due to conflation, lack of use in Translator right now
  ## - for ConsensusPathDB, look at "content information" tab at http://cpdb.molgen.mpg.de/CPDB to see versions of the pathway databases they used
  ## - pathway info includes Reactome, , Wikipathways, Biocarta
  ##   However, SRI ID resolver only accepts SMPDB, REACT, GO, PANTHER.PATHWAY right now
  ##   not included: humancyc, mousecyc, netpath, pharmgkb, pid, yeastcyc
    PathwayHasGene1:    ## using Reactome, KEGG, Wikipathways, Biocarta
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: REACT
            semantic: Pathway
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: pathway.reactome.id
        outputs: 
          - id: NCBIGene
            semantic: Gene
        parameters: 
          ## all records with pathway.reactome.id field also have entrezgene field
          fields: entrezgene
          species: human
          size: 1000  ## note the size limit
        predicate: has_participant
        source: "infores:reactome"
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/entrezgene"
        # testExamples:
        #   - qInput: "REACT:R-HSA-70895"  ## Branched-chain amino acid catabolism
        #     oneOutput: "NCBIGene:10295"  ## BCKDK
    PathwayHasGene2:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: "KEGG.PATHWAY"
            semantic: Pathway
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: pathway.kegg.id
        outputs: 
          - id: NCBIGene
            semantic: Gene
        parameters: 
          ## all records with pathway.kegg field also have entrezgene field
          fields: entrezgene,pathway.kegg.name
          species: human
          size: 1000  ## note the size limit
        predicate: has_participant
        source: "infores:cpdb"   ## ConsensusPathDB
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/entrezgene-keggname"
        # testExamples:
        #   - qInput: "KEGG.PATHWAY:hsa00120"  ## Primary bile acid biosynthesis - Homo sapiens (human)
        #     oneOutput: "NCBIGene:8309"  ## ACOX2
    PathwayHasGene3:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: WIKIPATHWAYS
            semantic: Pathway
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: pathway.wikipathways.id
        outputs: 
          - id: NCBIGene
            semantic: Gene
        parameters: 
          ## all records with pathway.wikipathways field also have entrezgene field
          fields: entrezgene,pathway.wikipathways.name
          species: human
          size: 1000  ## note the size limit
        predicate: has_participant
        source: "infores:cpdb"   ## ConsensusPathDB
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/entrezgene-wikiname"
        # testExamples:
        #   - qInput: "WIKIPATHWAYS:WP2034"  ## Leptin signaling pathway
        #     oneOutput: "NCBIGene:3953"  ## LEPR
    PathwayHasGene4:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: BIOCARTA
            semantic: Pathway
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: pathway.biocarta.id
        outputs: 
          - id: NCBIGene
            semantic: Gene
        parameters: 
          ## all records with pathway.biocarta field also have entrezgene field
          fields: entrezgene,pathway.biocarta.name
          species: human
          size: 1000  ## note the size limit
        predicate: has_participant
        source: "infores:cpdb"   ## ConsensusPathDB
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/entrezgene-biocartaname"
        # testExamples:
        #   - qInput: "BIOCARTA:raspathway"
        #     oneOutput: "NCBIGene:3265"  ## HRAS
    involvedInPathway1:    ## using Reactome, KEGG, Wikipathways, Biocarta
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: NCBIGene
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: entrezgene
        outputs: 
          - id: REACT
            semantic: Pathway
        parameters: 
        ## not including name since BTE isn't ingesting properly right now
          fields: >-
            pathway.reactome.id
          species: human
          size: 1000
        predicate: participates_in
        source: "infores:reactome"
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/reactomePathway"
        # testExamples:
        #   - qInput: "NCBIGene:1629"         ## DBT
        #     oneOutput: "REACT:R-HSA-70895"  ## Branched-chain amino acid catabolism
    involvedInPathway2:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: NCBIGene
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: entrezgene
        outputs: 
          - id: "KEGG.PATHWAY"
            semantic: Pathway
        parameters: 
        ## not including name since BTE isn't ingesting properly right now
          fields: >-
            pathway.kegg.id,pathway.kegg.name
          species: human
          size: 1000
        predicate: participates_in
        source: "infores:cpdb"   ## ConsensusPathDB
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/keggPathway"
        # testExamples:
        #   - qInput: "NCBIGene:1629"         ## DBT
        #     oneOutput: "KEGG.PATHWAY:hsa00280"  ## Valine, leucine and isoleucine degradation - Homo sapiens (human)
    involvedInPathway3:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: NCBIGene
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: entrezgene
        outputs: 
          - id: WIKIPATHWAYS
            semantic: Pathway
        parameters: 
        ## not including name since BTE isn't ingesting properly right now
          fields: >-
            pathway.wikipathways.id,pathway.wikipathways.name
          species: human
          size: 1000
        predicate: participates_in
        source: "infores:cpdb"   ## ConsensusPathDB
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/wikipathway"
        # testExamples:
        #   - qInput: "NCBIGene:8309"         ## ACOX2
        #     oneOutput: "WIKIPATHWAYS:WP3942"  ## PPAR signaling pathway
    involvedInPathway4:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: NCBIGene
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: entrezgene
        outputs: 
          - id: BIOCARTA
            semantic: Pathway
        parameters: 
        ## not including name since BTE isn't ingesting properly right now
          fields: >-
            pathway.biocarta.id,pathway.biocarta.name
          species: human
          size: 1000
        predicate: participates_in
        source: "infores:cpdb"   ## ConsensusPathDB
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/biocarta"
        # testExamples:
        #   - qInput: "NCBIGene:5608"         ## MAP2K6
        #     oneOutput: "BIOCARTA:p38mapkpathway"  ## p38 mapk signaling pathway
    involvedInBP:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: NCBIGene
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: entrezgene
        outputs: 
          - id: GO
            semantic: BiologicalProcess
        parameters: 
          ## all records with go.BP field also have entrezgene field
          ## not including: name, category/gocategory (not needed)
          fields: >-
            go.BP.id,
            go.BP.evidence,
            go.BP.pubmed,
            go.BP.qualifier
          species: human
          size: 1000
        predicate: participates_in
        source: "infores:ncbi-gene"   ## which got from GO Annotations...
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/biologicalProcess"
        # testExamples:
        #   - qInput: "NCBIGene:632"    ## BGLAP
        #     oneOutput: "GO:0001501"   ## skeletal system development
    BPToGene: 
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: GO
            semantic: BiologicalProcess
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## HAS PREFIX (GO)
            scopes: go.BP.id
        outputs: 
          - id: NCBIGene
            semantic: Gene
        parameters: 
          ## all records with go.BP field also have entrezgene field
          fields: entrezgene
          species: human
          size: 1000  ## note size limit
        predicate: has_participant
        source: "infores:ncbi-gene"   ## which got from GO Annotations...
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/entrezgene"
        # testExamples:
        #   - qInput: "GO:0001501"         ## skeletal system development
        #     oneOutput: "NCBIGene:5741"   ## PTH
    enablesMF:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: NCBIGene
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            ## all records with go.MF field also have entrezgene field
            scopes: entrezgene
        outputs: 
          - id: GO
            semantic: MolecularActivity
        parameters: 
          ## not including: name, category/gocategory (not needed)
          fields: >-
            go.MF.id,
            go.MF.evidence,
            go.MF.pubmed,
            go.MF.qualifier
          species: human
          size: 1000
        predicate: enables
        source: "infores:ncbi-gene"   ## which got from GO Annotations...
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/molecularFunction"
        # testExamples:
        #   - qInput: "NCBIGene:1629"   ## DBT
        #     oneOutput: "GO:0031405"   ## lipoic acid binding
    MFToGene:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: GO
            semantic: MolecularActivity
        requestBody: 
          body: 
            q: "{{ queryInputs }}"   ## HAS PREFIX (GO)
            scopes: go.MF.id
        outputs: 
          - id: NCBIGene
            semantic: Gene
        parameters: 
          ## all records with go.MF field also have entrezgene field
          fields: entrezgene
          species: human
          size: 1000  ## note size limit
        predicate: enabled_by
        source: "infores:ncbi-gene"   ## which got from GO Annotations...
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/entrezgene"
        # testExamples:
        #   - qInput: "GO:0008147"   ## structural constituent of bone
        #     oneOutput: "NCBIGene:632"   ## BGLAP
    involvedInCC: 
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: NCBIGene
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: entrezgene
        outputs: 
          - id: GO
            semantic: CellularComponent
        parameters: 
          ## all records with go.CC field also have entrezgene field
          ## not including: name, category/gocategory (not needed)
          fields:  >-
            go.CC.id,
            go.CC.evidence,
            go.CC.pubmed,
            go.CC.qualifier
          species: human
          size: 1000
        predicate: active_in
        source: "infores:ncbi-gene"   ## which got from GO Annotations...
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/cellularComponent"
        # testExamples:
        #   - qInput: "NCBIGene:5741"   ## PTH
        #     oneOutput: "GO:0005576"   ## extracellular region
    CCToGene: 
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: GO
            semantic: CellularComponent
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## HAS PREFIX (GO)
            scopes: go.CC.id
        outputs: 
          - id: NCBIGene
            semantic: Gene
        parameters: 
          ## all records with go.CC field also have entrezgene field
          fields: entrezgene
          species: human
          size: 1000  ## note size limit
        predicate: has_active_component
        source: "infores:ncbi-gene"   ## which got from GO Annotations...
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/entrezgene"
        # testExamples:
        #   - qInput: "GO:0033268"         ## node of Ranvier
        #     oneOutput: "NCBIGene:6326"   ## SCN2A
    geneToDisease:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: NCBIGene
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: entrezgene
        outputs: 
          - id: MONDO
            semantic: Disease
        parameters: 
          ## all records with clingen field have entrezgene, mondo fields
          ## not including: sop, disease_label
          fields: >-
            clingen.clinical_validity.mondo,
            clingen.clinical_validity.classification,
            clingen.clinical_validity.online_report
          species: human
          size: 1000
        ## using related_to because....
        ## - the strength of the assertion being made (is this gene related to disease)
        ##   is specified by the clingen.clinical_validity.classification field (see response-mapping)
        ## - reference: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5473734/
        ## - possible values: definitive, moderate, limited, disputed, refuted (!!!), no known disease relationship (!!!)
        ##     can be a list if there were multiple assertions/clinical_validity objects
        predicate: related_to
        source: "infores:clingen"
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/clingen"
        # testExamples:
        #   - qInput: "NCBIGene:23126"     ## POGZ
        #     oneOutput: "MONDO:0014606"   ## intellectual disability-microcephaly-strabismus-behavioral abnormalities syndrome
    diseaseToGene:
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: MONDO
            semantic: Disease
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: clingen.clinical_validity.mondo
        outputs: 
          - id: NCBIGene
            semantic: Gene
        parameters: 
          ## all records with clingen field have entrezgene, mondo fields
          fields: entrezgene
          species: human
          size: 1000
        predicate: related_to
        source: "infores:clingen"
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/entrezgene"
        # testExamples:
        #   - qInput: "MONDO:0014606"       ## intellectual disability-microcephaly-strabismus-behavioral abnormalities syndrome
        #     oneOutput: "NCBIGene:23126"   ## POGZ
    ## pantherdb gives orthologs and paralogs, which are both homologs. Hence we use homolog
    ## currently written: MGI 
    ## Also have Ensembl (for specific non-human species) and UniprotKB (for all orthologs)
    hasHomolog-MGI: 
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: HGNC
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs }}"  ## no prefix
            scopes: pantherdb.HGNC
        outputs: 
          - id: MGI
            semantic: Gene
        parameters: 
          fields: >-
            pantherdb.ortholog.MGI,
            pantherdb.ortholog.taxid
          ## almost all records with pantherdb.ortholog fields also have the entrezgene field
          ##   > 145,000 records have both fields, vs ~ 3600 records don't have the entrezgene field
          size: 1000
        predicate: homologous_to
        source: "infores:panther"
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/pantherMGI"
        # testExamples:
        #   - qInput: "HGNC:20589"       ## KCMF1
        #     oneOutput: "MGI:1921537"   ## Kcmf1
    hasHomolog-MGI-rev: 
    ## UPDATED TO USE TEMPLATING
      - supportBatch: true
        useTemplating: true
        inputs: 
          - id: MGI
            semantic: Gene
        requestBody: 
          body: 
            q: "{{ queryInputs | rmPrefix | join(',') }}"  ## no prefix
            scopes: pantherdb.ortholog.MGI
        outputs:
          - id: HGNC
            semantic: Gene
        parameters: 
          ## almost all records with pantherdb.ortholog fields also have the entrezgene field
          ##   > 145,000 records have both fields, vs ~ 3600 records don't have the entrezgene field
          fields: pantherdb.HGNC
          size: 1000
        predicate: homologous_to
        source: "infores:panther"
        response_mapping: 
          $ref: "#/components/x-bte-response-mapping/pantherHGNC"
        # testExamples:
        #   - qInput: "MGI:1916384"     ## Fam25c
        #     oneOutput: "HGNC:23586"   ## FAM25C
  x-bte-response-mapping:
    entrezgene: 
      NCBIGene: entrezgene   ## no prefix
    entrezgene-keggname: 
      NCBIGene: entrezgene   ## no prefix
      input_name: pathway.kegg.name
    entrezgene-wikiname: 
      NCBIGene: entrezgene   ## no prefix
      input_name: pathway.wikipathways.name
    entrezgene-biocartaname: 
      NCBIGene: entrezgene   ## no prefix
      input_name: pathway.biocarta.name
    reactomePathway: 
      REACT: pathway.reactome.id   ## no prefix
    keggPathway: 
      "KEGG.PATHWAY": pathway.kegg.id   ## no prefix
      output_name: pathway.kegg.name
    wikipathway: 
      WIKIPATHWAYS: pathway.wikipathways.id   ## no prefix
      output_name: pathway.wikipathways.name
    biocarta: 
      BIOCARTA: pathway.biocarta.id   ## no prefix
      output_name: pathway.biocarta.name
    biologicalProcess: 
      GO: go.BP.id  ## HAS PREFIX (GO)
      evidence: go.BP.evidence  ## categorical variable?
      pubmed: go.BP.pubmed
      "biolink:original_predicate": go.BP.qualifier  ## seems to be like a relation
    molecularFunction: 
      GO: go.MF.id  ## HAS PREFIX (GO)
      evidence: go.MF.evidence  ## categorical variable?
      pubmed: go.MF.pubmed
      "biolink:original_predicate": go.MF.qualifier  ## seems to be like a relation
    cellularComponent: 
      GO: go.CC.id  ## HAS PREFIX (GO)
      evidence: go.CC.evidence  ## categorical variable?
      pubmed: go.CC.pubmed
      "biolink:original_predicate": go.CC.qualifier  ## seems to be like a relation
    clingen: 
      MONDO: clingen.clinical_validity.mondo  ## HAS PREFIX (MONDO)
      ## possible values for classification: definitive, moderate, limited, disputed, refuted (!!!), no known disease relationship (!!!)
      clingen_clinical_validity_classification: clingen.clinical_validity.classification  
      "biolink:source_web_page": clingen.clinical_validity.online_report
    pantherMGI: 
      MGI: pantherdb.ortholog.MGI  ## no prefix
      inTaxon: pantherdb.ortholog.taxid
    pantherHGNC: 
      HGNC: pantherdb.HGNC  ## no prefix
