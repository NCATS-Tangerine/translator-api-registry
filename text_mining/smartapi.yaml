openapi: 3.0.3
info:
  contact:
    email: william.baumgartner@cuanschutz.edu
    name: Bill Baumgartner
    x-id: https://github.com/bill-baumgartner/
    x-role: responsible developer
  description: >-
    Documentation of Translator Text-Mining Provider's Targeted Association 
    query web services.
  termsOfService: https://biothings.io/about
  title: Text Mining Targeted Association API
  version: '2023-08-17'
  x-translator:
    infores: "infores:text-mining-provider-targeted"
    component: KP
    team:
      - Text Mining Provider
      - Service Provider
    biolink-version: "3.5.0"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/text_mining_targeted_association
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/text_mining_targeted_association
  x-maturity: production
tags:
- name: gene
- name: chemical
- name: disease
- name: phenotype
- name: association
- name: annotation
- name: query
- name: translator
- name: biothings
- name: biothings_graph
paths:
  "/association/{id}":
    get:
      description: >-
        By default, this will return the complete association in JSON format. If the input is not valid,
        404 (NOT FOUND) will be returned.
        

        Optionally, you can pass a "fields" parameter to return only the annotation you want 
        (by filtering returned object fields). "fields" accepts any attributes (a.k.a fields) available 
        from the association. Multiple attributes should be separated by commas. If an attribute is not 
        available for a specific association, it will be ignored. Note that the attribute names are 
        case-sensitive.


        Just like the query service, you can also pass a "callback" parameter to make a JSONP call.
      parameters:
      - name: id
        in: path
        required: true
        example: "6378d9e8c08d47e8709400ee631d15153f8b83cf649a31d803d77ef7362b4ac4-positive"
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/callback"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      ## these are noted in the /spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Association'
      #   '404':
      #     description: A response indicating an unknown association ID
      tags:
      - association
  "/association":
    post:
      description: >-
        Although making simple GET requests above to our service is sufficient in most use cases, 
        there are some times you might find it easier to batch query (e.g., retrieving multiple associations). 
        Fortunately, you can also make batch queries via POST requests when you need to.
      parameters:
      - name: ids
        description: >-
          Accepts multiple association ids separated by commas. Note that currently we only take ids up to 
          1000 maximum, the rest will be omitted.


          The request body can also be used to provide these ids.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      ## these are noted in the /spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "38d267e6df76d3a26cc198dce075dcf8b1d5f50fd8cebc72c58a2eb976813128-negative"
              - "1031517abf49bb9fa9443066cd9801ac90d7c942d9f5da43cdcf526fae87b7df-false"
            schema:
              type: object
              properties:
                ids:
                  description: >-
                    Accepts multiple association ids. Note that currently we only take the input ids 
                    up to 1000 maximum, the rest will be omitted.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - association
  "/metadata":
    get:
      description: Get metadata about the data available from the API
      ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
      # parameters:
      # - "$ref": "#/components/parameters/format"
      # - "$ref": "#/components/parameters/raw"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - metadata
  "/metadata/fields":
    get:
      description: Get metadata about the data fields available from the API
      ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
      # parameters:
      # - "$ref": "#/components/parameters/format"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/search"
      # - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - metadata
  "/query":
    get:
      description: >-
        Query service. In the output, "total" in the output gives the total number 
        of matching hits, while the actual hits are returned under "hits" field.
      parameters:
      - name: q
        description: >-
          Required, passing user query. The detailed query syntax for parameter is explained 
          [here for a core BioThings 
          API](https://docs.mychem.info/en/latest/doc/chem_query_service.html#query-syntax).
        in: query
        required: true
        example: "subject.UniProtKB:P28340"
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/facets"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/callback"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/email"
      ## these are noted in the /spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/aggs"
      # - "$ref": "#/components/parameters/userquery"
      # - "$ref": "#/components/parameters/explain"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      description: >-
        Although making simple GET requests above to our query service is sufficient for most use cases, 
        there are times you might find it more efficient to make batch queries (e.g., retrieving data 
        for multiple inputs). Fortunately, you can also make batch queries via POST requests when you need to.


        The "query” field in the returned object indicates the matching query term. If a query term has no match, 
        it will return with a “notfound” field with the value “true”.
      parameters:
      - name: q
        description: >-
          Accepts multiple values separated by commas. Note that currently we only take the input values up to 1000 
          maximum, the rest will be omitted.


          The request body can also be used to provide these ids.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        description: >-
          Optional, specify one or more fields (separated by commas) to search. Default: _id


          The request body can also be used to provide this information.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/sort"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "DB16305"
              - "DB09221"
              scopes:
              - "subject.DRUGBANK"
            schema:
              type: object
              properties:
                q:
                  description: >-
                    Accepts multiple values separated by commas. Note that currently we only take the input values 
                    up to 1000 maximum, the rest will be omitted.
                  type: array
                  items:
                    type: string
                scopes:
                  description: >-
                    Specify one or more fields (separated by commas) to search. Default: _id
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make batch gene queries and return matching gene hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-treats-mondo"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-treats-mondo-rev"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-treats-hp"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-treats-hp-rev"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-positively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-positively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-negatively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-negatively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-positively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-positively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-negatively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-negatively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-contributes_to-mondo"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-contributes_to-mondo-rev"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-contributes_to-hp"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-contributes_to-hp-rev"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-contributes_to-hp"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-contributes_to-hp-rev"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-contributes_to-mondo"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-contributes_to-mondo-rev"
## Per discussion on slack, the biolink:GeneToDiseaseOrPhenotypicFeatureAssociation
## does not have a subject|object_form_or_variant qualifier specified.
## Therefore, these operations are being removed until that is added to the specifications
#      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-gain_of_function_contributes_to-mondo"
#      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-gain_of_function_contributes_to-mondo-rev"
#      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-gain_of_function_contributes_to-hp"
#      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-gain_of_function_contributes_to-hp-rev"
#      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-loss_of_function_contributes_to-mondo"
#      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-loss_of_function_contributes_to-mondo-rev"
#      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-loss_of_function_contributes_to-hp"
#      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-loss_of_function_contributes_to-hp-rev"
components:
  parameters:
    callback:
      name: callback
      description: >-
        Optional, you can pass a "callback" parameter to make a JSONP call.
      in: query
      required: false
      schema:
        type: string
    dotfield:
      name: dotfield
      description: >-
        Optional, can be used to control the format of the returned object. 
        If "dotfield" is true, the returned data object is returned flattened (no nested objects) 
        using dotfield notation for key names. Default: false.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    email:
      name: email
      description: >-
        Optional, if you are regular users of our services, we encourage you to provide us an email, 
        so that we can better track the usage or follow up with you.
      in: query
      required: false
      schema:
        type: string
    facet_size:
      name: facet_size
      description: >-
        Optional, an integer (1 <= facet_size <= 1000) that specifies how many buckets to return in a 
        [faceted query](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#faceted-queries).
      in: query
      required: false
      schema:
        type: integer
        default: 10
    facets:
      name: facets
      description: >-
        Optional, a single field or comma-separated fields to return facets, can only be used on non-free text fields. 
        E.g. “facets=chembl.molecule_properties.full_mwt”. See [examples of faceted queries for a core BioThings 
        API](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#faceted-queries).
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    fetch_all:
      name: fetch_all
      description: >-
        Optional, a boolean, which when TRUE, allows fast retrieval of all unsorted query hits. 
        The return object contains a _scroll_id field, which when passed as a parameter to the query endpoint 
        (see the scroll_id parameter), returns the next 1000 query results. Setting fetch_all = TRUE causes 
        the results to be inherently unsorted, therefore the sort parameter is ignored. For more information, 
        see [examples using fetch_all for a core BioThings 
        API](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#scrolling-queries). 
        Default: FALSE.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    fields:
      name: fields
      description: >-
        Optional, can be a comma-separated list to limit the fields returned from the object. 
        If "fields=all", all available fields will be returned.
        

        Note that it supports dot notation as well, e.g., you can pass "chebi.name". 
        Default: "fields=all". 
        The parameter "filter" is an alias for this parameter.
      in: query
      required: false
      schema:
        type: string
        default: all
    from:
      name: from
      description: >-
        Optional, the number of matching hits to skip, starting from 0. Default: 0.
      in: query
      required: false
      schema:
        type: integer
        default: 0
    scroll_id:
      name: scroll_id
      description: >-
        Optional, a string containing the _scroll_id returned from a query request with fetch_all = TRUE. 
        Supplying a valid scroll_id will return the next 1000 unordered results. If the next results are 
        not obtained within 1 minute of the previous set of results, the scroll_id becomes stale, and a 
        new one must be obtained with another query request with fetch_all = TRUE. All other parameters are 
        ignored when the scroll_id parameter is supplied. For more information see [examples using scroll_id 
        for a core BioThings 
        API](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#scrolling-queries).
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: >-
        Optional, the maximum number of matching hits to return (with a cap of 1000 at the moment). Default: 10.
        The combination of "size" and "from" parameters can be used to get paging for a large query.
      in: query
      required: false
      schema:
        type: integer
        default: 10
    sort:
      name: sort
      description: >-
        Optional, the comma-separated fields to sort on. Prefix with "-" for descending order, otherwise in ascending order. 
        Default: sort by matching scores in descending order.
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
    # _sorted:
    #   name: _sorted
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    #     default: true
    # aggs:
    #   name: aggs
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # allow_null:
    #   name: allow_null
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # always_list:
    #   name: always_list
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # explain:
    #   name: explain
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # format:
    #   name: format
    #   description: 'controls output format of server response, currently supports:
    #     "json", "jsonld", "html". Type: string. Default: json.'
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    #     default: json
    # prefix:
    #   name: prefix
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    # raw:
    #   name: raw
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # rawquery:
    #   name: rawquery
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # search:
    #   name: search
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    # userquery:
    #   name: userquery
    #   in: query
    #   required: false
    #   schema:
    #     type: string
  ## commenting out schemas and other status codes for now
  # schemas:
  #   Association:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - $ref: '#/components/schemas/Association'
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           $ref: '#/components/schemas/Association'
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations:
  ## - examples aren't currently formatted to the standard. See https://github.com/biothings/BioThings_Explorer_TRAPI/issues/357#issue-1054150561
  ## - for reverse operations, some edge attributes may seem odd (reversed subj/obj)
  ## - don't use subject.type/object.type in q, that came from SRI ID resolver and differs a lot between IDs of same namespace
  ## - use heuristics to specify input / output type. BTE will handle any discrepancies w/ SRI ID resolver...
  ##   - CHEBI, DRUGBANK :SmallMolecule
  ##   - MONDO: Disease
  ##   - HP: PhenotypicFeaure
  ##   - UniProtKB: Gene
  ## - currently we can't express _exists_ with this kind of query: useful for setting the output
  ## - currently, BTE handles prefix (CHEBI / MONDO / HP keep their prefixes, DRUGBANK / UniProtKB does not).  
  ##   in the future, could edit parser + queries to handle prefixes
  ## - joinSafe is only needed if the delimiter isn't a comma
    drugbank-treats-mondo:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:treats AND _exists_:object.MONDO
    ## I find all records (249143) use object.type:Disease
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.MONDO,association.edge_attributes
          size: 1000
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: treats
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo-object"
        ## Examples:
        ## - DRUGBANK:DB00537 (Ciprofloxacin) -> MONDO:0024314 (parasitemia)
        ## - DRUGBANK:DB00390 (Digoxin) -> MONDO:0000468 (third-degree atrioventricular block)
    drugbank-treats-mondo-rev:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:treats AND _exists_:object.MONDO
    ## Not going to specify subject.type since DRUGBANK IDs were mapped to SmallMolecule, NamedThing mostly (a little ChemicalEntity, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["object.MONDO", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        predicate: treated_by
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
        ## Examples:
        ## - MONDO:0024314 (parasitemia) -> DRUGBANK:DB00537 (Ciprofloxacin) 
        ## - MONDO:0000468 (third-degree atrioventricular block) -> DRUGBANK:DB00390 (Digoxin) 
    drugbank-treats-hp:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:treats AND _exists_:object.HP
    ## I find only 5987 records (out of 18037) have object.type:PhenotypicFeature...most are Disease (12050)
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.HP,association.edge_attributes
          size: 1000
        outputs:
          - id: HP
            semantic: PhenotypicFeature
        predicate: treats
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/hp-object"
        ## Examples:
        ## - DRUGBANK:DB00202 (Succinylcholine) -> HP:0002153 (Hyperkalemia)
        ## - DRUGBANK:DB00829 (Diazepam) -> HP:0020219 (Motor seizure)
    drugbank-treats-hp-rev:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:treats AND _exists_:object.HP
    ## Not going to specify subject.type since DRUGBANK IDs were mapped to SmallMolecule, NamedThing mostly (a little ChemicalEntity, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: HP
            semantic: PhenotypicFeature
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["object.HP", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        predicate: treated_by
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
        ## Examples:
        ## - HP:0002153 (Hyperkalemia) -> DRUGBANK:DB00202 (Succinylcholine) 
        ## - HP:0020219 (Motor seizure) -> DRUGBANK:DB00829 (Diazepam) 
    drugbank-positively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 2.4.8: used entity_positively_regulates_entity
        predicate: affects
        qualifiers:
          qualified_predicate: causes
          object_aspect_qualifier: activity_or_abundance
          object_direction_qualifier: increased
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - DRUGBANK:DB00515 (Cisplatin) -> UniProtKB:O94788 (ALDH1A2) 
        ## - DRUGBANK:DB15907 (Escin) -> UniProtKB:P05177 (CYP1A2)
    drugbank-positively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
    ## Not going to specify subject.type since DRUGBANK IDs were mapped to SmallMolecule, NamedThing mostly (a little ChemicalEntity, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        ## biolink 2.4.8: used entity_positively_regulated_by_entity
        predicate: affected_by
        qualifiers:
          qualified_predicate: caused_by
          subject_aspect_qualifier: activity_or_abundance
          subject_direction_qualifier: increased
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
        ## Examples:
        ## - UniProtKB:O94788 (ALDH1A2) -> DRUGBANK:DB00515 (Cisplatin) 
        ## - UniProtKB:P05177 (CYP1A2) -> DRUGBANK:DB15907 (Escin) 
    drugbank-negatively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 2.4.8: used entity_negatively_regulates_entity
        predicate: affects
        qualifiers:
          qualified_predicate: causes
          object_aspect_qualifier: activity_or_abundance
          object_direction_qualifier: decreased
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - DRUGBANK:DB00067 (Vasopressin) -> UniProtKB:P01236 (PRL) 
        ## - DRUGBANK:DB00602 (Ivermectin) -> UniProtKB:O14983 (ATP2A1)
    drugbank-negatively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
    ## Not going to specify subject.type since DRUGBANK IDs were mapped to SmallMolecule, NamedThing mostly (a little ChemicalEntity, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        ## biolink 2.4.8: used entity_negatively_regulated_by_entity
        predicate: affected_by
        qualifiers:
          qualified_predicate: caused_by
          subject_aspect_qualifier: activity_or_abundance
          subject_direction_qualifier: decreased
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
        ## Examples:
        ## - UniProtKB:P01236 (PRL) -> DRUGBANK:DB00067 (Vasopressin) 
        ## - UniProtKB:O14983 (ATP2A1) -> DRUGBANK:DB00602 (Ivermectin) 
    uniprotkb-positively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["subject.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ##   interpretation: X "regulates" Y's "upregulated" state
        ## biolink 2.4.8: used entity_positively_regulates_entity
        predicate: regulates
        qualifiers:
          object_direction_qualifier: upregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - UniProtKB:O00429 (DNM1L) -> UniProtKB:P46939 (UTRN) 
        ## - UniProtKB:P36148 (GPT2) -> UniProtKB:P30531 (SLC6A1)
    uniprotkb-positively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ##   interpretation: Y's "upregulated" state "regulated_by" X
        ## biolink 2.4.8: used entity_positively_regulated_by_entity
        predicate: regulated_by
        qualifiers:
          subject_direction_qualifier: upregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
        ## Examples:
        ## - UniProtKB:P46939 (UTRN) -> UniProtKB:O00429 (DNM1L) 
        ## - UniProtKB:P30531 (SLC6A1) -> UniProtKB:P36148 (GPT2) 
    uniprotkb-negatively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["subject.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ##   interpretation: X "regulates" Y's "downregulated" state
        ## biolink 2.4.8: used entity_negatively_regulates_entity
        predicate: regulates
        qualifiers:
          object_direction_qualifier: downregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - UniProtKB:P12272 (PTHLH) -> UniProtKB:Q9BPZ7 (MAPKAP1) 
        ## - UniProtKB:P43004 (SLC1A2) -> UniProtKB:Q13148 (TARDBP) 
    uniprotkb-negatively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ##   interpretation: Y's "downregulated" state "regulated_by" X
        ## biolink 2.4.8: used entity_negatively_regulated_by_entity
        predicate: regulated_by
        qualifiers:
          subject_direction_qualifier: downregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
        ## Examples:
        ## - UniProtKB:Q9BPZ7 (MAPKAP1) -> UniProtKB:P12272 (PTHLH) 
        ## - UniProtKB:Q13148 (TARDBP) -> UniProtKB:P43004 (SLC1A2) 
    uniprotkb-contributes_to-mondo:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:contributes_to AND _exists_:object.MONDO
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["subject.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: object.MONDO,association.edge_attributes
          size: 1000
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: contributes_to
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo-object"
        ## Examples:
        ## - UniProtKB:P01344 (IGF2) -> MONDO:0005075 (thyroid gland papillary carcinoma) 
        ## - UniProtKB:P01185 (AVP) -> MONDO:0009366 (normal pressure hydrocephalus) 
    uniprotkb-contributes_to-mondo-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:contributes_to AND _exists_:object.MONDO
    ## I find almost all records (368678 / 368708) use object.type:Disease
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["object.MONDO", "association.edge_label"]
            }
        parameters:
          fields: subject.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        predicate: contribution_from
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
        ## Examples:
        ## - MONDO:0005075 (thyroid gland papillary carcinoma) -> UniProtKB:P01344 (IGF2) 
        ## - MONDO:0009366 (normal pressure hydrocephalus) -> UniProtKB:P01185 (AVP) 
    uniprotkb-contributes_to-hp:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:contributes_to AND _exists_:object.HP
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["subject.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: object.HP,association.edge_attributes
          size: 1000
        outputs:
          - id: HP
            semantic: PhenotypicFeature
        predicate: contributes_to
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/hp-object"
        ## Examples:
        ## - UniProtKB:Q76L83 (ASXL2) -> HP:0001510 (Growth delay) 
        ## - UniProtKB:P17677 (GAP43) -> HP:0002197 (Generalized-onset seizure) 
    uniprotkb-contributes_to-hp-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:contributes_to AND _exists_:object.HP
    ## I find only 6824 records (out of 24414) use object.type:PhenotypicFeature...most use Disease (17491)
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: HP
            semantic: PhenotypicFeature
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["object.HP", "association.edge_label"]
            }
        parameters:
          fields: subject.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        predicate: contribution_from
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
        ## Examples:
        ## - HP:0001510 (Growth delay) -> UniProtKB:Q76L83 (ASXL2) 
        ## - HP:0002197 (Generalized-onset seizure) -> UniProtKB:P17677 (GAP43) 
    drugbank-contributes_to-hp:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:contributes_to AND _exists_:object.HP
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.HP,association.edge_attributes
          size: 1000
        outputs:
          - id: HP
            semantic: PhenotypicFeature
        predicate: contributes_to
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/hp-object"
    drugbank-contributes_to-hp-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:contributes_to AND _exists_:object.HP
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: HP
            semantic: PhenotypicFeature
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["object.HP", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        predicate: contribution_from
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
    drugbank-contributes_to-mondo:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:contributes_to AND _exists_:object.MONDO
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.MONDO,association.edge_attributes
          size: 1000
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: contributes_to
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo-object"
    drugbank-contributes_to-mondo-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:contributes_to AND _exists_:object.MONDO
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["object.MONDO", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        predicate: contribution_from
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
## Per discussion on slack, the biolink:GeneToDiseaseOrPhenotypicFeatureAssociation
## does not have a subject|object_form_or_variant qualifier specified.
## Therefore, these operations are being removed until that is added to the specifications
#    uniprotkb-gain_of_function_contributes_to-hp:
#    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:gain_of_function_contributes_to AND _exists_:object.HP
#      - supportBatch: true
#        useTemplating: true ## flag to say templating is being used below
#        inputs:
#          - id: UniProtKB
#            semantic: Gene
#        requestBodyType: object
#        requestBody:
#          body: >-
#            {
#              "q": [ {{ queryInputs | wrap( '["' , '","gain_of_function_contributes_to"]') }} ],
#              "scopes": ["subject.UniProtKB", "association.edge_label"]
#            }
#        parameters:
#          fields: object.HP,association.edge_attributes
#          size: 1000
#        outputs:
#          - id: HP
#            semantic: PhenotypicFeature
#        predicate: affects
#        qualifiers:
#          qualified_predicate: contributes_to
#          subject_form_or_variant_qualifier: gain_of_function_variant_form
#        response_mapping:
#          "$ref": "#/components/x-bte-response-mapping/hp-object"
#        ## Examples:
#        ## - UniProtKB:P42574 (Caspace-3) -> HP:0001251 (ataxia)
#        ## - UniProtKB:Q13485 (SMAD4) -> HP:0004322 (short stature)
#    uniprotkb-gain_of_function_contributes_to-hp-rev:
#    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:gain_of_function_contributes_to AND _exists_:object.HP
#      - supportBatch: true
#        useTemplating: true ## flag to say templating is being used below
#        inputs:
#          - id: HP
#            semantic: PhenotypicFeature
#        requestBodyType: object
#        requestBody:
#          body: >-
#            {
#              "q": [ {{ queryInputs | wrap( '["' , '","gain_of_function_contributes_to"]') }} ],
#              "scopes": ["object.HP", "association.edge_label"]
#            }
#        parameters:
#          fields: subject.UniProtKB,association.edge_attributes
#          size: 1000
#        outputs:
#          - id: UniProtKB
#            semantic: Gene
#        predicate: affected_by
#        qualifiers:
#          qualified_predicate: contribution_from
#          object_form_or_variant_qualifier: gain_of_function_variant_form
#        response_mapping:
#          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
#        ## Examples:
#        ## - UniProtKB:P42574 (Caspace-3) -> HP:0001251 (ataxia)
#        ## - UniProtKB:Q13485 (SMAD4) -> HP:0004322 (short stature)
#    uniprotkb-gain_of_function_contributes_to-mondo:
#    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:gain_of_function_contributes_to AND _exists_:object.MONDO
#      - supportBatch: true
#        useTemplating: true ## flag to say templating is being used below
#        inputs:
#          - id: UniProtKB
#            semantic: Gene
#        requestBodyType: object
#        requestBody:
#          body: >-
#            {
#              "q": [ {{ queryInputs | wrap( '["' , '","gain_of_function_contributes_to"]') }} ],
#              "scopes": ["subject.UniProtKB", "association.edge_label"]
#            }
#        parameters:
#          fields: object.MONDO,association.edge_attributes
#          size: 1000
#        outputs:
#          - id: MONDO
#            semantic: Disease
#        predicate: affects
#        qualifiers:
#          qualified_predicate: contributes_to
#          subject_form_or_variant_qualifier: gain_of_function_variant_form
#        response_mapping:
#          "$ref": "#/components/x-bte-response-mapping/mondo-object"
#        ## Examples:
#        ## - UniProtKB:P42574 (Caspace-3) -> MONDO:0008119 (spinocerebellar ataxia type 1)
#        ## - UniProtKB:Q13485 (SMAD4) -> MONDO:0007688 (Myhre syndrome)
#    uniprotkb-gain_of_function_contributes_to-mondo-rev:
#    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:gain_of_function_contributes_to AND _exists_:object.MONDO
#      - supportBatch: true
#        useTemplating: true ## flag to say templating is being used below
#        inputs:
#          - id: MONDO
#            semantic: Disease
#        requestBodyType: object
#        requestBody:
#          body: >-
#            {
#              "q": [ {{ queryInputs | wrap( '["' , '","gain_of_function_contributes_to"]') }} ],
#              "scopes": ["object.MONDO", "association.edge_label"]
#            }
#        parameters:
#          fields: subject.UniProtKB,association.edge_attributes
#          size: 1000
#        outputs:
#          - id: UniProtKB
#            semantic: Gene
#        predicate: affected_by
#        qualifiers:
#          qualified_predicate: contribution_from
#          object_form_or_variant_qualifier: gain_of_function_variant_form
#        response_mapping:
#          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
#        ## Examples:
#        ## - UniProtKB:P42574 (Caspace-3) -> MONDO:0008119 (spinocerebellar ataxia type 1)
#        ## - UniProtKB:Q13485 (SMAD4) -> MONDO:0007688 (Myhre syndrome)
#    uniprotkb-loss_of_function_contributes_to-hp:
#    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:loss_of_function_contributes_to AND _exists_:object.HP
#      - supportBatch: true
#        useTemplating: true ## flag to say templating is being used below
#        inputs:
#          - id: UniProtKB
#            semantic: Gene
#        requestBodyType: object
#        requestBody:
#          body: >-
#            {
#              "q": [ {{ queryInputs | wrap( '["' , '","loss_of_function_contributes_to"]') }} ],
#              "scopes": ["subject.UniProtKB", "association.edge_label"]
#            }
#        parameters:
#          fields: object.HP,association.edge_attributes
#          size: 1000
#        outputs:
#          - id: HP
#            semantic: PhenotypicFeature
#        predicate: affects
#        qualifiers:
#          qualified_predicate: contributes_to
#          subject_form_or_variant_qualifier: loss_of_function_variant_form
#        response_mapping:
#          "$ref": "#/components/x-bte-response-mapping/hp-object"
#        ## Examples:
#        ## - UniProtKB:Q92993 (Histone acetyltransferase KAT5) -> HP:0002664 (tumors)
#        ## - UniProtKB:P20591 (Interferon-induced GTP-binding protein Mx1) -> HP:0000568 (microphthalmia)
#    uniprotkb-loss_of_function_contributes_to-hp-rev:
#    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:loss_of_function_contributes_to AND _exists_:object.HP
#      - supportBatch: true
#        useTemplating: true ## flag to say templating is being used below
#        inputs:
#          - id: HP
#            semantic: PhenotypicFeature
#        requestBodyType: object
#        requestBody:
#          body: >-
#            {
#              "q": [ {{ queryInputs | wrap( '["' , '","loss_of_function_contributes_to"]') }} ],
#              "scopes": ["object.HP", "association.edge_label"]
#            }
#        parameters:
#          fields: subject.UniProtKB,association.edge_attributes
#          size: 1000
#        outputs:
#          - id: UniProtKB
#            semantic: Gene
#        predicate: affected_by
#        qualifiers:
#          qualified_predicate: contribution_from
#          object_form_or_variant_qualifier: loss_of_function_variant_form
#        response_mapping:
#          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
#        ## Examples:
#        ## - UniProtKB:Q92993 (Histone acetyltransferase KAT5) -> HP:0002664 (tumors)
#        ## - UniProtKB:P20591 (Interferon-induced GTP-binding protein Mx1) -> HP:0000568 (microphthalmia)
#    uniprotkb-loss_of_function_contributes_to-mondo:
#    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:loss_of_function_contributes_to AND _exists_:object.MONDO
#      - supportBatch: true
#        useTemplating: true ## flag to say templating is being used below
#        inputs:
#          - id: UniProtKB
#            semantic: Gene
#        requestBodyType: object
#        requestBody:
#          body: >-
#            {
#              "q": [ {{ queryInputs | wrap( '["' , '","loss_of_function_contributes_to"]') }} ],
#              "scopes": ["subject.UniProtKB", "association.edge_label"]
#            }
#        parameters:
#          fields: object.MONDO,association.edge_attributes
#          size: 1000
#        outputs:
#          - id: MONDO
#            semantic: Disease
#        predicate: affects
#        qualifiers:
#          qualified_predicate: contributes_to
#          subject_form_or_variant_qualifier: loss_of_function_variant_form
#        response_mapping:
#          "$ref": "#/components/x-bte-response-mapping/mondo-object"
#        ## Examples:
#        ## - UniProtKB:Q8IUH4 (ZDHHC13) -> MONDO:0017816 (systemic amyloidosis)
#        ## - UniProtKB:P78504 (JAG1) -> MONDO:0007318 (Alagille syndrome)
#    uniprotkb-loss_of_function_contributes_to-mondo-rev:
#    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:loss_of_function_contributes_to AND _exists_:object.MONDO
#      - supportBatch: true
#        useTemplating: true ## flag to say templating is being used below
#        inputs:
#          - id: MONDO
#            semantic: Disease
#        requestBodyType: object
#        requestBody:
#          body: >-
#            {
#              "q": [ {{ queryInputs | wrap( '["' , '","loss_of_function_contributes_to"]') }} ],
#              "scopes": ["object.MONDO", "association.edge_label"]
#            }
#        parameters:
#          fields: subject.UniProtKB,association.edge_attributes
#          size: 1000
#        outputs:
#          - id: UniProtKB
#            semantic: Gene
#        predicate: affected_by
#        qualifiers:
#          qualified_predicate: contribution_from
#          object_form_or_variant_qualifier: loss_of_function_variant_form
#        response_mapping:
#          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
#        ## Examples:
#        ## - UniProtKB:Q8IUH4 (ZDHHC13) -> MONDO:0017816 (systemic amyloidosis)
#        ## - UniProtKB:P78504 (JAG1) -> MONDO:0007318 (Alagille syndrome)
  x-bte-response-mapping:
    mondo-object:
      MONDO: object.MONDO
      edge-attributes: association.edge_attributes
    chebi-subject:
      CHEBI: subject.CHEBI
      edge-attributes: association.edge_attributes
    hp-object:
      HP: object.HP
      edge-attributes: association.edge_attributes
    drugbank-subject:
      DRUGBANK: subject.DRUGBANK
      edge-attributes: association.edge_attributes
    uniprotkb-object:
      UniProtKB: object.UniProtKB
      edge-attributes: association.edge_attributes
    uniprotkb-subject:
      UniProtKB: subject.UniProtKB
      edge-attributes: association.edge_attributes
