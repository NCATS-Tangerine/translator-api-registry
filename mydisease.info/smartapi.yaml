openapi: 3.0.0
info:
  contact:
    email: help@biothings.io
    name: Chunlei Wu
    x-id: https://github.com/newgene
    x-role: responsible developer
  x-translator:
    infores-curie: "infores:mydisease-info"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.3"
  description: Documentation of the MyDisease.info disease query web services.  Learn
    more about [mydisease.info](http://mydisease.info/)
  termsOfService: http://mydisease.info/terms
  title: MyDisease.info API
  version: '1.0'
servers:
- description: Production server
  url: http://mydisease.info/v1
tags:
- name: disease
- name: annotation
- name: query
- name: translator
- name: biothings
paths:
  "/disease":
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple disease IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/Disease"
                type: array
          description: A list of matching disease objects
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: For a list of disease IDs, return the matching disease object
      tags:
      - disease
  "/disease/{diseaseid}":
    get:
      parameters:
      - description: Retrieve disease objects based on ID
        example: MONDO:0016575
        in: path
        name: diseaseid
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Disease"
          description: A matching disease object
        '404':
          description: A response indicating an unknown disease ID
      summary: Retrieve disease objects based on ID
      tags:
      - disease
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/callback"
        in: query
        name: callback
      responses:
        '200':
          description: mydisease.info metadata object
      summary: Get metadata about the data available from mydisease.info
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/search"
        name: search
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/prefix"
        name: prefix
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          description: mydisease.info metadata fields object
      summary: Get metadata about the data fields available from a mydisease.info
        chem object
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - description: 'Query string.  The detailed query syntax can be found from our
          [docs](http://mydisease.info).  Examples: "cancer", "primary ciliary dyskinesia",
          "DOID:9562"'
        example: cancer
        in: query
        name: q
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/facet_size"
        name: facet_size
      - "$ref": "#/components/parameters/sort"
        name: sort
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/facets"
        name: facets
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/from"
        name: from
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryResult"
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make disease queries and return matching disease hits. Supports JSONP
        and CORS as well.
      tags:
      - query
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryPOSTResult"
          description: Query response objects with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make batch disease queries and return matching disease hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/disease-gene"
      - "$ref": "#/components/x-bte-kgs-operations/disease-variant"
      - "$ref": "#/components/x-bte-kgs-operations/disease-phenotype"
      - "$ref": "#/components/x-bte-kgs-operations/disease-phenotype2"
      - "$ref": "#/components/x-bte-kgs-operations/disease-chemical"
      - "$ref": "#/components/x-bte-kgs-operations/disease-chemical2"
#       - "$ref": "#/components/x-bte-kgs-operations/disease-pathway"
#       - "$ref": "#/components/x-bte-kgs-operations/disease-pathway2"
      - "$ref": "#/components/x-bte-kgs-operations/gene-disease"
      - "$ref": "#/components/x-bte-kgs-operations/variant-disease"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype-disease"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype-disease2"
      - "$ref": "#/components/x-bte-kgs-operations/chemical-disease"
      - "$ref": "#/components/x-bte-kgs-operations/chemical-disease2"
#       - "$ref": "#/components/x-bte-kgs-operations/pathway-disease"
#       - "$ref": "#/components/x-bte-kgs-operations/pathway-disease2"
      - "$ref": "#/components/x-bte-kgs-operations/has_subclass"
      - "$ref": "#/components/x-bte-kgs-operations/subclass_of"
      - "$ref": "#/components/x-bte-kgs-operations/predisposes_towards"
      - "$ref": "#/components/x-bte-kgs-operations/predisposes_towards-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_shares_features_of"
      - "$ref": "#/components/x-bte-kgs-operations/disease_shares_features_of-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_major_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_major_feature-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_feature-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_causes_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_causes_feature-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_arises_from_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_arises_from_feature-rev"
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned disease object. If "true" or
        "1", all fields will be collapsed into a single level deep object (all nested
        objects will be a single level deep, using dotfield notation to signify the
        nested structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching disease hit(s). The supported
        field names can be found from any disease object or from the /metadata/fields
        endpoint. If "fields=all", all available fields will be returned. Type: string
        (list). Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching disease hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching disease hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    Disease:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - "$ref": "#/components/schemas/Disease"
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            "$ref": "#/components/schemas/Disease"
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-response-mapping:
    ## not including "name" field since BTE isn't ingesting / using it to annotate nodes...
    disease-gene:
      NCBIGene: disgenet.genes_related_to_disease.gene_id  ## no prefix
      pubmed: disgenet.genes_related_to_disease.pubmed     ## no prefix
      source: disgenet.genes_related_to_disease.source
      ## could remove "disgenet-" prefix from the key
      ##  if the key becomes the TRAPI attribute "original_attribute_name"
      disgenet-DPI: disgenet.genes_related_to_disease.DPI
      disgenet-DSI: disgenet.genes_related_to_disease.DSI
      disgenet-score: disgenet.genes_related_to_disease.score
    disease-variant:
      DBSNP: disgenet.variants_related_to_disease.rsid       ## no prefix
      pubmed: disgenet.variants_related_to_disease.pubmed    ## no prefix
      source: disgenet.variants_related_to_disease.source
      ## could remove "disgenet-" prefix from the key
      ##  if the key becomes the TRAPI attribute "original_attribute_name"
      disgenet-DPI: disgenet.variants_related_to_disease.DPI
      disgenet-DSI: disgenet.variants_related_to_disease.DSI
      disgenet-score: disgenet.variants_related_to_disease.score
    disease-phenotype:
      HP: hpo.phenotype_related_to_disease.hpo_id             ## HAS PREFIX (HP)
      ## note: there are 6 reference-related fields (parser created based on ID namespace)
      pubmed: hpo.phenotype_related_to_disease.pmid_refs                 ## HAS PREFIX (PMID)
      isbn_refs: hpo.phenotype_related_to_disease.isbn_refs              ## HAS PREFIX (ISBN)
      website_refs: hpo.phenotype_related_to_disease.website_refs        ## no prefix
      decipher_refs: hpo.phenotype_related_to_disease.decipher_refs      ## HAS PREFIX (DECIPHER)
      omim_refs: hpo.phenotype_related_to_disease.omim_refs              ## HAS PREFIX (OMIM)
      orphanet_refs: hpo.phenotype_related_to_disease.orphanet_refs      ## HAS PREFIX (ORPHANET)
      ## note: there are 4 frequency-related fields (parser created based on different data types)
      numeric_freq: hpo.phenotype_related_to_disease.numeric_freq           ## decimal freq
      hp_freq: hpo.phenotype_related_to_disease.hp_freq                     ## HP ontology freq term
      freq_numerator: hpo.phenotype_related_to_disease.freq_numerator       ## frequency as a fraction (numerator)
      freq_denominator: hpo.phenotype_related_to_disease.freq_denominator   ## frequency as a fraction (denominator)
      ## value of this field is evidence codes (IEA, TAS, PCS)
      evidence: hpo.phenotype_related_to_disease.evidence
      ## modifier/sex fields provide context...only in some disease-phenotype records...
      modifier: hpo.phenotype_related_to_disease.modifier
      sex: hpo.phenotype_related_to_disease.sex
      biocuration: hpo.phenotype_related_to_disease.biocuration
    disease-chemical:
      MESH: ctd.chemical_related_to_disease.mesh_chemical_id    ## no prefix
      ## direct_evidence has two values, 'marker/mechanism' or 'therapeutic'
      direct_evidence: ctd.chemical_related_to_disease.direct_evidence
      pubmed: ctd.chemical_related_to_disease.pubmed     ## no prefix
#     disease-pathway:  
#       REACT: ctd.pathway_related_to_disease.react_pathway_id
#     disease-pathway2:  
#       KEGG: ctd.pathway_related_to_disease.kegg_pathway_id
    umls:
      UMLS: disgenet.xrefs.umls     ## no prefix
    omim:
      OMIM: hpo.omim  ## no prefix
    orphanet:
      ORPHANET: hpo.orphanet  ## no prefix
    mondo:  ## added for a bunch of operations
      MONDO: mondo.mondo  ## HAS PREFIX (MONDO)
    ctd-mesh-disease:  ## added for chemical-disease operation
      MESH: ctd.mesh  ## no prefix
    ctd-omim-disease:  ## added for chemical-disease2 operation
      OMIM: ctd.omim  ## no prefix
    has_subclass:
      MONDO: mondo.children    ## HAS PREFIX (MONDO)
    subclass_of:
      MONDO: mondo.parents    ## HAS PREFIX (MONDO)
    predisposes_towards:
      MONDO: mondo.predisposes_towards.mondo    ## HAS PREFIX (MONDO)
    disease_shares_features_of:
      MONDO: mondo.disease_shares_features_of.mondo    ## HAS PREFIX (MONDO)
    disease_has_major_feature:
      MONDO: mondo.disease_has_major_feature.mondo    ## HAS PREFIX (MONDO)
    disease_has_feature:
      MONDO: mondo.disease_has_feature.mondo    ## HAS PREFIX (MONDO)
    disease_causes_feature:
      MONDO: mondo.disease_causes_feature.mondo    ## HAS PREFIX (MONDO)
    disease_arises_from_feature:
      MONDO: mondo.disease_arises_from_feature.mondo    ## HAS PREFIX (MONDO)
  x-bte-kgs-operations:
  ## NOTES:
  ## - there isn't more distinct operations because we can't retrieve subsets of the data under a disease / data_source. 
  ##   for example, https://mydisease.info/v1/query?q=%20disgenet.variants_related_to_disease.source:CLINVAR 
  ##    will NOT restrict the info under the variants_related_to_disease to only records with source == CLINVAR
  ##   instead, it will retrieve ALL the info for diseases where AT LEAST 1 variants_related_to_disease record exists that matches that restriction
  ## - the data files also lack more specific associations...
    disease-gene:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UMLS
            semantic: Disease
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: disgenet.xrefs.umls
          header: application/x-www-form-urlencoded
        parameters:
          fields: disgenet.genes_related_to_disease
        outputs:
          - id: NCBIGene
            semantic: Gene
        ## can't be more specific because we can't restrict (see note above)
        predicate: gene_associated_with_condition 
        source: "infores:disgenet"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-gene"
        # testExamples:
        #   - qInput: "UMLS:C0023264"     ## Leigh Disease
        #     oneOutput: "NCBIGene:4694"  ## NDUFA1
    disease-variant:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UMLS
            semantic: Disease
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: disgenet.xrefs.umls
          header: application/x-www-form-urlencoded
        parameters:
          fields: disgenet.variants_related_to_disease
        outputs:
          - id: DBSNP
            semantic: SequenceVariant
        ## can't be more specific because we can't restrict (see note above)
        predicate: related_to
        source: "infores:disgenet"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-variant"
        # testExamples:
        #   - qInput: "UMLS:C0023264"     ## Leigh Disease
        #     oneOutput: "DBSNP:rs1161932777"
  ## for hpo-annotation-based operations:
  ## - currently, the mydisease parser for hpo maps the resources' IDs (OMIM or ORPHANET) to MONDO. 
  ##   If two IDs (ex: OMIM:218340 and ORPHANET:1777 for Temtamy syndrome) map to the same MONDO ID, it looks like only the OMIM data was kept.
  ##   However, then data is missing: in the raw data, those two IDs have different sets of annotated phenotypes...
  ## - there is DECIPHER-ID-based disease-pheno info that isn't captured by BTE right now.
  ##   however, this is not much info (~22 diseases) and we don't have mappings from SRI-based ID resolver
    disease-phenotype:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: OMIM
            semantic: Disease
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: hpo.omim
          header: application/x-www-form-urlencoded
        parameters:
          fields: hpo.phenotype_related_to_disease
        outputs:
          - id: HP
            semantic: PhenotypicFeature
        predicate: has_phenotype
        ## sort-of has a relation. Parser made this based on annotations with aspect == "P"
        ##   (notice aspect as "I" became hpo.inheritance, "C" became hpo.course, "M" became hpo.modifier)
        source: "infores:hpo-annotations"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
        # testExamples:
        #   - qInput: "OMIM:246900"     ## Dihydrolipoamide Dehydrogenase Deficiency
        #     oneOutput: "HP:0001254"   ## Lethargy
    disease-phenotype2:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: ORPHANET
            semantic: Disease
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: hpo.orphanet
          header: application/x-www-form-urlencoded
        parameters:
          fields: hpo.phenotype_related_to_disease
        outputs:
          - id: HP
            semantic: PhenotypicFeature
        predicate: has_phenotype
        ## sort-of has a relation. Parser made this based on annotations with aspect == "P"
        ##   (notice aspect as "I" became hpo.inheritance, "C" became hpo.course, "M" became hpo.modifier)
        source: "infores:hpo-annotations"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
        # testExamples:
        #   - qInput: "ORPHANET:881"    ## Turner Syndrome
        #     oneOutput: "HP:0000137"   ## Abnormality of the ovary
  ## for ctd-based operations:
  ## - when the mydisease parser maps the resources' IDs to MONDO, are there situations where a MESH and a OMIM ID map to the same MONDO? 
  ##   If so, 1) Is only one of them kept?, 
  ##          2) Do those IDs have different data linked to them? (so data is missing with the current behavior)
  ##   From what I can tell, CTD does their own entity resolution. 
  ##   If a disease has MESH and OMIM IDs, the raw data has its info under the MESH ID only. The OMIM ID is only used as the main disease ID if there isn't a matching MESH ID
  ## - we wanted to add CTD direct disease-gene data, operations
  ## - we removed CTD disease-pathway data because that info is all indirect
    disease-chemical:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MESH
            semantic: Disease
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: ctd.mesh
          header: application/x-www-form-urlencoded
        parameters:
          fields: ctd.chemical_related_to_disease
        outputs:
          - id: MESH
            semantic: SmallMolecule
            ## note that 3085 / 3253 have cas_registry_number field that can be used as well
        predicate: related_to
        ## there is a field that kinda tells the "relation" in response-mapping right now
        ##   (direct_evidence can have value "marker/mechanism" or "therapeutic").
        source: "infores:ctd"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-chemical"
        # testExamples:
        #   - qInput: "MESH:D009102"    ## Multiple Organ Failure
        #     oneOutput: "MESH:C448659"   ## Geldanamycin, monohydrochloride
    disease-chemical2:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: OMIM
            semantic: Disease
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: ctd.omim
          header: application/x-www-form-urlencoded
        parameters:
          fields: ctd.chemical_related_to_disease
        outputs:
          - id: MESH
            semantic: SmallMolecule
            ## note that 3085 / 3253 have cas_registry_number field that can be used as well
        predicate: related_to
        ## there is a field that kinda tells the "relation" in response-mapping right now
        ##   (direct_evidence can have value "marker/mechanism" or "therapeutic").
        source: "infores:ctd"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-chemical"
        # testExamples:
        #   - qInput: "OMIM:146850"       ## IMMUNE SUPPRESSION
        #     oneOutput: "MESH:D014810"   ## DL-alpha-Tocopherol
##########################################################################
## with "reverse" querying, we will pull up ALL info under the disease, rather than under a specific record...
##   so we can't retrieve the subset of data for the specific gene / variant / etc's record 
    gene-disease:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: NCBIGene
            semantic: Gene
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: disgenet.genes_related_to_disease.gene_id
          header: application/x-www-form-urlencoded
        parameters:
          fields: disgenet.xrefs.umls
          size: '1000'  ## note the size limit
        outputs:
          - id: UMLS
            semantic: Disease
        predicate: condition_associated_with_gene
        source: "infores:disgenet"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/umls"
        # testExamples:
        #   - qInput: "NCBIGene:1629"       ## DBT
        #     oneOutput: "UMLS:C3658290"    ## Drug-Induced Acute Liver Injury
    variant-disease:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DBSNP
            semantic: SequenceVariant
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: disgenet.variants_related_to_disease.rsid
          header: application/x-www-form-urlencoded
        parameters:
          fields: disgenet.xrefs.umls
          size: '1000'  ## note the size limit
        outputs:
          - id: UMLS
            semantic: Disease
        predicate: related_to
        source: "infores:disgenet"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/umls"
        # testExamples:
        #   - qInput: "DBSNP:rs78655421"
        #     oneOutput: "UMLS:C4021107"    ## Non-obstructive azoospermia
    phenotype-disease:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: HP
            semantic: PhenotypicFeature
        requestBody:
          body:
            ## HAS PREFIX (HP): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('HP', ':') | joinSafe(',') }}"
            scopes: hpo.phenotype_related_to_disease.hpo_id
          header: application/x-www-form-urlencoded
        parameters:
          fields: hpo.omim
          size: '1000'  ## note the size limit
        outputs:
          - id: OMIM
            semantic: Disease
        predicate: phenotype_of
        source: "infores:hpo-annotations"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/omim"
        # testExamples:
        #   - qInput: "HP:0000224"       ## Hypogeusia
        #     oneOutput: "OMIM:608720"   ## Neuropathy, Hereditary Sensory And Autonomic, Adult-onset, With Anosmia
    phenotype-disease2:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: HP
            semantic: PhenotypicFeature
        requestBody:
          body:
            ## HAS PREFIX (HP): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('HP', ':') | joinSafe(',') }}"
            scopes: hpo.phenotype_related_to_disease.hpo_id
          header: application/x-www-form-urlencoded
        parameters:
          fields: hpo.orphanet
          size: '1000'  ## note the size limit
        outputs:
          - id: ORPHANET
            semantic: Disease
        predicate: phenotype_of
        source: "infores:hpo-annotations"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/orphanet"
        # testExamples:
        #   - qInput: "HP:0000224"          ## Hypogeusia
        #     oneOutput: "ORPHANET:99857"   ## Secondary Syringomyelia
    chemical-disease:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MESH
            semantic: SmallMolecule
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: ctd.chemical_related_to_disease.mesh_chemical_id
          header: application/x-www-form-urlencoded
        parameters:
          fields: ctd.mesh
          size: '1000'  ## note the size limit
        outputs:
          - id: MESH
            semantic: Disease
        predicate: related_to
        source: "infores:ctd"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/ctd-mesh-disease"
        # testExamples:
        #   - qInput: "MESH:D000655"      ## Amodiaquine
        #     oneOutput: "MESH:D008288"   ## Malaria (maps to MONDO:0005136)
    chemical-disease2:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MESH
            semantic: SmallMolecule
        requestBody:
          body:
            ## currently, BTE already strips prefix...
            q: "{{ queryInputs | rmPrefix | joinSafe(',') }}"
            scopes: ctd.chemical_related_to_disease.mesh_chemical_id
          header: application/x-www-form-urlencoded
        parameters:
          fields: ctd.omim
          size: '1000'  ## note the size limit
        outputs:
          - id: OMIM
            semantic: Disease
        predicate: related_to
        source: "infores:ctd"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/ctd-omim-disease"
        # testExamples:
        #   - qInput: "MESH:D000655"     ## Amodiaquine
        #     oneOutput: "OMIM:248310"   ## PLASMODIUM FALCIPARUM BLOOD INFECTION LEVEL (maps to MONDO:0009553)
############################################################################
    ## - there's also disease_ontology info (ancestors, children, descendants, parents)
    ## - there's also mondo info (ancestors, descendants)
    ## - mondo info we're not including:
    ##     - part_of_progression_of_disease (only 2 disease-disease relationships)
    ##     - has_modifier (something is off here, shouldn't be mondo prefix...)
    ##     - excluded_subClassOf (something is off here, I'm not sure what that means)
    ##     - disjoint from (this is a negation / NOT relationship)
    has_subclass:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.children
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: superclass_of  ## this is the inverse of subclass_of right now
        ## relation: "has children"?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/has_subclass"
        # testExamples:
        #   - qInput: "MONDO:0002494"      ## substance-related disorder
        #     oneOutput: "MONDO:0021698"   ## alcohol-related disorders
    subclass_of:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.parents
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: subclass_of
        ## relation: "has parents"?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/subclass_of"
        # testExamples:
        #   - qInput: "MONDO:0002494"      ## substance-related disorder
        #     oneOutput: "MONDO:0002025"   ## psychiatric disorder
    predisposes_towards:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.predisposes_towards
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: contributes_to  ## maps to "MONDO:predisposes_towards"
        ## could use more specific biolink predicate like predisposes??
        ## relation: "MONDO:predisposes_towards"?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/predisposes_towards"
        # testExamples:
        #   - qInput: "MONDO:0010940"      ## inherited susceptibility to asthma
        #     oneOutput: "MONDO:0004979"   ## asthma
    predisposes_towards-rev:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.predisposes_towards.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.mondo
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: contribution_from
        ## inverse of contributes_to, which is mapped to "MONDO:predisposes_towards"
        ## no relation then...
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0004979"      ## asthma
        #     oneOutput: "MONDO:0010940"   ## inherited susceptibility to asthma
    disease_shares_features_of:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.disease_shares_features_of
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: similar_to  ## could biolink have a more specific predicate?
        ##   note that relation maps to biolink:related_to right now...
        ## relation: "MONDO:disease_shares_features_of"?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_shares_features_of"
        # testExamples:
        #   - qInput: "MONDO:0008711"      ## Goodman syndrome
        #     oneOutput: "MONDO:0019012"   ## Carpenter syndrome
    disease_shares_features_of-rev:
    ## checked and inverse relationship doesn't exist already in the data
    ##   for example, the record for Carpenter syndrome doesn't have disease_shares_features_of
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.disease_shares_features_of.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.mondo
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: similar_to  ## could biolink have a more specific predicate?
        ## no relation...
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0019012"      ## Carpenter syndrome
        #     oneOutput: "MONDO:0008711"   ## Goodman syndrome
    disease_has_major_feature:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.disease_has_major_feature
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: has_part  ## maps to "MONDO:disease_has_major_feature"
        ## relation: "MONDO:disease_has_major_feature"?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_has_major_feature"
        # testExamples:
        #   - qInput: "MONDO:0015140"      ## early-onset autosomal dominant Alzheimer disease
        #     oneOutput: "MONDO:0001627"   ## dementia (disease)
    disease_has_major_feature-rev:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.disease_has_major_feature.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.mondo
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: part_of  ## could biolink have a more specific predicate?
        ## no relation...
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0001627"      ## dementia (disease)
        #     oneOutput: "MONDO:0015140"   ## early-onset autosomal dominant Alzheimer disease
    disease_has_feature:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.disease_has_feature
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: has_part  ## no biolink mapping...
        ## relation: "MONDO:disease_has_feature"?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_has_feature"
        # testExamples:
        #   - qInput: "MONDO:0005796"      ## HIV enteropathy
        #     oneOutput: "MONDO:0005020"   ## intestinal disease
    disease_has_feature-rev:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.disease_has_feature.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.mondo
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: part_of
        ## no relation...
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0005020"      ## intestinal disease
        #     oneOutput: "MONDO:0005796"   ## HIV enteropathy
    disease_causes_feature:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.disease_causes_feature
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: causes  ## maps to "MONDO:disease_causes_feature"
        ## relation: "MONDO:disease_causes_feature"?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_causes_feature"
        # testExamples:
        #   - qInput: "MONDO:0000490"      ## glomerulosclerosis
        #     oneOutput: "MONDO:0001106"   ## kidney failure
    disease_causes_feature-rev:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.disease_causes_feature.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.mondo
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: caused_by
        ## no relation...
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0001106"      ## kidney failure
        #     oneOutput: "MONDO:0000490"   ## glomerulosclerosis
    disease_arises_from_feature:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.disease_arises_from_feature
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: caused_by
        ## relation: "MONDO:disease_arises_from_feature"?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_arises_from_feature"
        # testExamples:
        #   - qInput: "MONDO:0009346"      ## histidinuria due to a renal tubular defect
        #     oneOutput: "MONDO:0021568"   ## renal tubule disease
    disease_arises_from_feature-rev:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBody:
          body:
            ## HAS PREFIX (MONDO): currently a bit redundant to do this (BTE handles it)
            q: "{{ queryInputs | replPrefix('MONDO', ':') | joinSafe(',') }}"
            scopes: mondo.disease_arises_from_feature.mondo
          header: application/x-www-form-urlencoded
        parameters:
          fields: mondo.mondo
          size: '1000'  ## note the size limit
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: causes
        ## no relation...
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0021568"      ## renal tubule disease
        #     oneOutput: "MONDO:0009346"   ## histidinuria due to a renal tubular defect
