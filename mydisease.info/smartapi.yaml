openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: Chunlei Wu
    x-id: https://github.com/newgene
    x-role: responsible developer
  description: Documentation of the MyDisease.info disease query web services.  Learn
    more about [mydisease.info](http://mydisease.info/)
  termsOfService: http://mydisease.info/terms
  title: MyDisease.info API
  version: '1.0'
  x-translator:
    infores: "infores:mydisease-info"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.13"
servers:
- description: Production server
  url: http://mydisease.info/v1
  x-maturity: production
tags:
- name: disease
- name: annotation
- name: query
- name: translator
- name: biothings
paths:
  "/disease/{id}":
    get:
      parameters:
      - name: id
        description: Retrieve disease objects based on ID
        in: path
        required: true
        example: "MONDO:0000490"
        schema:
          type: string
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: "Success"
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Disease'
      #   '404':
      #     description: A response indicating an unknown disease ID
      # summary: Retrieve disease objects based on ID
      tags:
      - disease
  "/disease":
    post:
      parameters:
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "MONDO:0000490"
              - "MONDO:0019012"
            schema:
              type: object
              properties:
                ids:
                  description: 'multiple disease IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "Success"
      tags:
      - disease
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/dev"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/search"
      - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data fields available from a record
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - name: q
        description: 'Query string.  The detailed query syntax can be found from our
          [docs](http://mydisease.info).  Examples: "cancer", "primary ciliary dyskinesia",
          "DOID:9562"'
        in: query
        required: true
        example: "cancer"
        schema:
          type: string
      - "$ref": "#/components/parameters/aggs"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/userquery"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/explain"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      parameters:
      - name: q
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            default:
            - _id
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "MONDO:0000490"
              - "MONDO:0019012"
              scopes:
              - "mondo.mondo"
            schema:
              type: object
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: array
                  items:
                    type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: array
                  items:
                    type: string
                from:
                  type: integer
                sort:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make batch gene queries and return matching gene hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/disease-gene"
      - "$ref": "#/components/x-bte-kgs-operations/disease-variant"
      - "$ref": "#/components/x-bte-kgs-operations/disease-phenotype"
      - "$ref": "#/components/x-bte-kgs-operations/disease-phenotype2"
      - "$ref": "#/components/x-bte-kgs-operations/disease-chemical"
      - "$ref": "#/components/x-bte-kgs-operations/disease-chemical2"
      - "$ref": "#/components/x-bte-kgs-operations/gene-disease"
      - "$ref": "#/components/x-bte-kgs-operations/variant-disease"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype-disease"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype-disease2"
      - "$ref": "#/components/x-bte-kgs-operations/chemical-disease"
      - "$ref": "#/components/x-bte-kgs-operations/chemical-disease2"
      # - "$ref": "#/components/x-bte-kgs-operations/has_subclass"
      # - "$ref": "#/components/x-bte-kgs-operations/subclass_of"
      - "$ref": "#/components/x-bte-kgs-operations/predisposes_towards"
      - "$ref": "#/components/x-bte-kgs-operations/predisposes_towards-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_shares_features_of"
      - "$ref": "#/components/x-bte-kgs-operations/disease_shares_features_of-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_major_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_major_feature-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_feature-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_causes_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_causes_feature-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_arises_from_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_arises_from_feature-rev"
components:
  parameters:
    _sorted:
      name: _sorted
      in: query
      required: false
      schema:
        type: boolean
        default: true
    _source:
      name: _source
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    aggs:
      name: aggs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    allow_null:
      name: allow_null
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    always_list:
      name: always_list
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    dev:
      name: dev
      in: query
      required: false
      schema:
        type: boolean
    dotfield:
      name: dotfield
      in: query
      required: false
      schema:
        type: boolean
    explain:
      name: explain
      in: query
      required: false
      schema:
        type: boolean
    facet_size:
      name: facet_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    fetch_all:
      name: fetch_all
      in: query
      required: false
      schema:
        type: boolean
    format:
      name: format
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      required: false
      schema:
        type: string
        default: json
    from:
      name: from
      in: query
      required: false
      schema:
        type: integer
    prefix:
      name: prefix
      in: query
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      required: false
      schema:
        type: boolean
    rawquery:
      name: rawquery
      in: query
      required: false
      schema:
        type: boolean
    scroll_id:
      name: scroll_id
      in: query
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: "default: 10 objects/records in response"
      in: query
      required: false
      schema:
        type: integer
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    userquery:
      name: userquery
      in: query
      required: false
      schema:
        type: string
  schemas:
    Disease:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - "$ref": "#/components/schemas/Disease"
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            "$ref": "#/components/schemas/Disease"
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-response-mapping:
    ## not including "name" field since BTE isn't ingesting / using it to annotate nodes...
    disease-gene:
      NCBIGene: disgenet.genes_related_to_disease.gene_id  ## no prefix
      pubmed: disgenet.genes_related_to_disease.pubmed     ## no prefix
      source: disgenet.genes_related_to_disease.source
      ## could remove "disgenet-" prefix from the key
      ##  if the key becomes the TRAPI attribute "original_attribute_name"
      disgenet-DPI: disgenet.genes_related_to_disease.DPI
      disgenet-DSI: disgenet.genes_related_to_disease.DSI
      disgenet-EI: disgenet.genes_related_to_disease.EI
      disgenet-score: disgenet.genes_related_to_disease.score
    disease-variant:
      DBSNP: disgenet.variants_related_to_disease.rsid       ## no prefix
      pubmed: disgenet.variants_related_to_disease.pubmed    ## no prefix
      source: disgenet.variants_related_to_disease.source
      ## could remove "disgenet-" prefix from the key
      ##  if the key becomes the TRAPI attribute "original_attribute_name"
      disgenet-DPI: disgenet.variants_related_to_disease.DPI
      disgenet-DSI: disgenet.variants_related_to_disease.DSI
      disgenet-EI: disgenet.variants_related_to_disease.EI
      disgenet-score: disgenet.variants_related_to_disease.score
    disease-phenotype:
      HP: hpo.phenotype_related_to_disease.hpo_id             ## HAS PREFIX (HP)
      ## note: there are 6 reference-related fields (parser created based on ID namespace)
      pubmed: hpo.phenotype_related_to_disease.pmid_refs                 ## HAS PREFIX (PMID)
      isbn_refs: hpo.phenotype_related_to_disease.isbn_refs              ## HAS PREFIX (ISBN)
      website_refs: hpo.phenotype_related_to_disease.website_refs        ## no prefix
      decipher_refs: hpo.phenotype_related_to_disease.decipher_refs      ## HAS PREFIX (DECIPHER)
      omim_refs: hpo.phenotype_related_to_disease.omim_refs              ## HAS PREFIX (OMIM)
      orphanet_refs: hpo.phenotype_related_to_disease.orphanet_refs      ## HAS PREFIX (ORPHANET)
      ## note: there are 4 frequency-related fields (parser created based on different data types)
      numeric_freq: hpo.phenotype_related_to_disease.numeric_freq           ## decimal freq
      hp_freq: hpo.phenotype_related_to_disease.hp_freq                     ## HP ontology freq term
      freq_numerator: hpo.phenotype_related_to_disease.freq_numerator       ## frequency as a fraction (numerator)
      freq_denominator: hpo.phenotype_related_to_disease.freq_denominator   ## frequency as a fraction (denominator)
      ## value of this field is evidence codes (IEA, TAS, PCS)
      hpoa_evidence_code: hpo.phenotype_related_to_disease.evidence
      ## supposed to provide context (only present in some records)
      ## - modifier/onset fields are HP terms w/ prefix
      ## - sex will be "male" or "female"
      "biolink:clinical_modifier_qualifier": hpo.phenotype_related_to_disease.modifier
      "biolink:onset_qualifier": hpo.phenotype_related_to_disease.onset
      "biolink:sex_qualifier": hpo.phenotype_related_to_disease.sex
    disease-chemical:
      MESH: ctd.chemical_related_to_disease.mesh_chemical_id    ## no prefix
      # name: ctd.chemical_related_to_disease.chemical_name
      ## direct_evidence has two values, 'marker/mechanism' or 'therapeutic'
      ctd_evidence_type: ctd.chemical_related_to_disease.direct_evidence
      pubmed: ctd.chemical_related_to_disease.pubmed     ## no prefix
    umls:
      UMLS: disgenet.xrefs.umls     ## no prefix
    omim:
      OMIM: hpo.omim  ## no prefix
    orphanet:
      ORPHANET: hpo.orphanet  ## no prefix
    mondo:  ## added for a bunch of operations
      MONDO: mondo.mondo  ## HAS PREFIX (MONDO)
    ctd-mesh-disease:  ## added for chemical-disease operation
      MESH: ctd.mesh  ## no prefix
    ctd-omim-disease:  ## added for chemical-disease2 operation
      OMIM: ctd.omim  ## no prefix
    # has_subclass:
    #   MONDO: mondo.children    ## HAS PREFIX (MONDO)
    # subclass_of:
    #   MONDO: mondo.parents    ## HAS PREFIX (MONDO)
    predisposes_towards:
      MONDO: mondo.predisposes_towards.mondo    ## HAS PREFIX (MONDO)
    disease_shares_features_of:
      MONDO: mondo.disease_shares_features_of.mondo    ## HAS PREFIX (MONDO)
    disease_has_major_feature:
      MONDO: mondo.disease_has_major_feature.mondo    ## HAS PREFIX (MONDO)
    disease_has_feature:
      MONDO: mondo.disease_has_feature.mondo    ## HAS PREFIX (MONDO)
    disease_causes_feature:
      MONDO: mondo.disease_causes_feature.mondo    ## HAS PREFIX (MONDO)
    disease_arises_from_feature:
      MONDO: mondo.disease_arises_from_feature.mondo    ## HAS PREFIX (MONDO)
  x-bte-kgs-operations:
  ## NOTES:
  ## - there isn't more distinct operations because we can't retrieve subsets of the data under a disease / data_source. 
  ##   for example, https://mydisease.info/v1/query?q=%20disgenet.variants_related_to_disease.source:CLINVAR 
  ##    will NOT restrict the info under the variants_related_to_disease to only records with source == CLINVAR
  ##   instead, it will retrieve ALL the info for diseases where AT LEAST 1 variants_related_to_disease record exists that matches that restriction
  ## - the disgenet data files also lack more specific relationship terms...
    disease-gene:
    ## 22942 / 27762 disgenet.genes_related_to_disease records have disgenet.xrefs.umls
      - supportBatch: true
        inputSeparator: ","
        parameters:
        ## see https://www.disgenet.org/dbinfo#section44
        ## not including YearFinal, YearInitial, gene_name 
          fields: >- 
            disgenet.genes_related_to_disease.gene_id,
            disgenet.genes_related_to_disease.pubmed,
            disgenet.genes_related_to_disease.source,
            disgenet.genes_related_to_disease.DPI,
            disgenet.genes_related_to_disease.DSI,
            disgenet.genes_related_to_disease.EI,
            disgenet.genes_related_to_disease.score
        requestBody:
          body:
            q: "{inputs[0]}"  ## no prefix
            scopes: disgenet.xrefs.umls
          header: application/x-www-form-urlencoded
        inputs:
        - id: UMLS
          semantic: Disease
        outputs:
        - id: NCBIGene
          semantic: Gene
        ## can't be more specific because we can't restrict (see note above)
        predicate: condition_associated_with_gene 
        source: "infores:disgenet"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-gene"
        # testExamples:
        #   - qInput: "UMLS:C0023264"     ## Leigh Disease
        #     oneOutput: "NCBIGene:4694"  ## NDUFA1
    disease-variant:
    ## 11200 / 12605 disgenet.variants_related_to_disease records have disgenet.xrefs.umls
      - supportBatch: true
        inputSeparator: ","
        parameters:
        ## see https://www.disgenet.org/dbinfo#section45
        ## not including YearFinal, YearInitial, chrom, pos 
          fields: >- 
            disgenet.variants_related_to_disease.rsid,
            disgenet.variants_related_to_disease.pubmed,
            disgenet.variants_related_to_disease.source,
            disgenet.variants_related_to_disease.DPI,
            disgenet.variants_related_to_disease.DSI,
            disgenet.variants_related_to_disease.EI,
            disgenet.variants_related_to_disease.score
        requestBody:
          body:
            q: "{inputs[0]}"  ## no prefix
            scopes: disgenet.xrefs.umls
          header: application/x-www-form-urlencoded
        inputs:
        - id: UMLS
          semantic: Disease
        outputs:
        - id: DBSNP
          semantic: SequenceVariant
        ## can't be more specific because we can't restrict (see note above)
        predicate: related_to
        source: "infores:disgenet"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-variant"
        # testExamples:
        #   - qInput: "UMLS:C0023264"     ## Leigh Disease
        #     oneOutput: "DBSNP:rs1161932777"
  ## for hpo-annotation-based operations:
  ## - currently, the mydisease parser for hpo maps the resources' IDs (OMIM or ORPHANET) to MONDO. 
  ##   If two IDs (ex: OMIM:218340 and ORPHANET:1777 for Temtamy syndrome) map to the same MONDO ID, it looks like only the OMIM data was kept.
  ##   However, then data is missing: in the raw data, those two IDs have different sets of annotated phenotypes...
  ## - there is DECIPHER-ID-based disease-pheno info that isn't captured by BTE right now.
  ##   however, this is not much info (~22 diseases) and we don't have mappings from SRI-based ID resolver
    disease-phenotype:
      - supportBatch: true
        inputSeparator: ","
        parameters:
        ## not including biocuration field
          fields: >-
            hpo.phenotype_related_to_disease.hpo_id,
            hpo.phenotype_related_to_disease.pmid_refs,
            hpo.phenotype_related_to_disease.isbn_refs,
            hpo.phenotype_related_to_disease.website_refs,
            hpo.phenotype_related_to_disease.decipher_refs,
            hpo.phenotype_related_to_disease.omim_refs,
            hpo.phenotype_related_to_disease.orphanet_refs,
            hpo.phenotype_related_to_disease.numeric_freq,
            hpo.phenotype_related_to_disease.hp_freq,
            hpo.phenotype_related_to_disease.freq_numerator,
            hpo.phenotype_related_to_disease.freq_denominator,
            hpo.phenotype_related_to_disease.evidence,
            hpo.phenotype_related_to_disease.modifier,
            hpo.phenotype_related_to_disease.onset,
            hpo.phenotype_related_to_disease.sex
        requestBody:
          body:
            q: "{inputs[0]}"  ## no prefix
            scopes: hpo.omim
          header: application/x-www-form-urlencoded
        inputs:
        - id: OMIM
          semantic: Disease
        outputs:
        - id: HP
          semantic: PhenotypicFeature
        predicate: has_phenotype
        ## includes annotations with aspect == "P"
        ##   (aspect as "I" became hpo.inheritance, "C" became hpo.course, "M" became hpo.modifier)
        source: "infores:hpo-annotations"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
        # testExamples:
        #   - qInput: "OMIM:246900"     ## Dihydrolipoamide Dehydrogenase Deficiency
        #     oneOutput: "HP:0001254"   ## Lethargy
    disease-phenotype2:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: >-
            hpo.phenotype_related_to_disease.hpo_id,
            hpo.phenotype_related_to_disease.pmid_refs,
            hpo.phenotype_related_to_disease.isbn_refs,
            hpo.phenotype_related_to_disease.website_refs,
            hpo.phenotype_related_to_disease.decipher_refs,
            hpo.phenotype_related_to_disease.omim_refs,
            hpo.phenotype_related_to_disease.orphanet_refs,
            hpo.phenotype_related_to_disease.numeric_freq,
            hpo.phenotype_related_to_disease.hp_freq,
            hpo.phenotype_related_to_disease.freq_numerator,
            hpo.phenotype_related_to_disease.freq_denominator,
            hpo.phenotype_related_to_disease.evidence,
            hpo.phenotype_related_to_disease.modifier,
            hpo.phenotype_related_to_disease.onset,
            hpo.phenotype_related_to_disease.sex
        requestBody:
          body:
            q: "{inputs[0]}"  ## no prefix
            scopes: hpo.orphanet
          header: application/x-www-form-urlencoded
        inputs:
        - id: ORPHANET
          semantic: Disease
        outputs:
        - id: HP
          semantic: PhenotypicFeature
        predicate: has_phenotype
        source: "infores:hpo-annotations"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
        # testExamples:
        #   - qInput: "ORPHANET:881"    ## Turner Syndrome
        #     oneOutput: "HP:0000137"   ## Abnormality of the ovary
  ## for ctd-based operations:
  ## - when the mydisease parser maps the resources' IDs to MONDO, are there situations where a MESH and a OMIM ID map to the same MONDO? 
  ##   If so, 1) Is only one of them kept?, 
  ##          2) Do those IDs have different data linked to them? (so data is missing with the current behavior)
  ##   From what I can tell, CTD does their own entity resolution. 
  ##   If a disease has MESH and OMIM IDs, the raw data has its info under the MESH ID only. The OMIM ID is only used as the main disease ID if there isn't a matching MESH ID
  ## - we wanted to add CTD direct disease-gene data, operations
  ## - we removed CTD disease-pathway data because that info is all indirect
    disease-chemical:
      - supportBatch: true
        inputSeparator: ","
        parameters:
        ## not including: cas_registry_number, source, name
        ## BTE currently isn't ingesting name correctly
          fields: >-
            ctd.chemical_related_to_disease.mesh_chemical_id,
            ctd.chemical_related_to_disease.direct_evidence,
            ctd.chemical_related_to_disease.pubmed
        requestBody:
          body:
            q: "{inputs[0]}"  ## no prefix
            scopes: ctd.mesh
          header: application/x-www-form-urlencoded
        inputs:
        - id: MESH
          semantic: Disease
        outputs:
        - id: MESH
          semantic: SmallMolecule
          ## note that 3085 / 3253 have cas_registry_number field that can be used as well
        predicate: related_to
        ## direct_evidence is kinda like a relation....
        ##   can have value "marker/mechanism" or "therapeutic").
        source: "infores:ctd"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-chemical"
        # testExamples:
        #   - qInput: "MESH:D009102"    ## Multiple Organ Failure
        #     oneOutput: "MESH:C448659"   ## Geldanamycin, monohydrochloride
    disease-chemical2:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: >-
            ctd.chemical_related_to_disease.mesh_chemical_id,
            ctd.chemical_related_to_disease.direct_evidence,
            ctd.chemical_related_to_disease.pubmed
        requestBody:
          body:
            q: "{inputs[0]}"  ## no prefix
            scopes: ctd.omim
          header: application/x-www-form-urlencoded
        inputs:
        - id: OMIM
          semantic: Disease
        outputs:
        - id: MESH
          semantic: SmallMolecule
        predicate: related_to
        source: "infores:ctd"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease-chemical"
        # testExamples:
        #   - qInput: "MESH:D009102"    ## Multiple Organ Failure
        #     oneOutput: "MESH:C448659"   ## Geldanamycin, monohydrochloride
##########################################################################
## with "reverse" querying, we will pull up ALL info under the disease, rather than under a specific record...
##   so we can't retrieve the subset of data for the specific gene / variant / etc's record 
    gene-disease:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: disgenet.xrefs.umls
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## no prefix
            scopes: disgenet.genes_related_to_disease.gene_id
          header: application/x-www-form-urlencoded
        inputs:
        - id: NCBIGene
          semantic: Gene
        outputs:
        - id: UMLS
          semantic: Disease
        predicate: gene_associated_with_condition
        source: "infores:disgenet"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/umls"
        # testExamples:
        #   - qInput: "NCBIGene:1629"       ## DBT
        #     oneOutput: "UMLS:C3658290"    ## Drug-Induced Acute Liver Injury
    variant-disease:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: disgenet.xrefs.umls
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## no prefix
            scopes: disgenet.variants_related_to_disease.rsid
          header: application/x-www-form-urlencoded
        inputs:
        - id: DBSNP
          semantic: SequenceVariant
        outputs:
        - id: UMLS
          semantic: Disease
        predicate: related_to
        source: "infores:disgenet"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/umls"
        # testExamples:
        #   - qInput: "DBSNP:rs78655421"
        #     oneOutput: "UMLS:C4021107"    ## Non-obstructive azoospermia
    phenotype-disease:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: hpo.omim
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (HP)
            scopes: hpo.phenotype_related_to_disease.hpo_id
          header: application/x-www-form-urlencoded
        inputs:
        - id: HP
          semantic: PhenotypicFeature
        outputs:
        - id: OMIM
          semantic: Disease
        predicate: phenotype_of
        source: "infores:hpo-annotations"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/omim"
        # testExamples:
        #   - qInput: "HP:0000224"       ## Hypogeusia
        #     oneOutput: "OMIM:608720"   ## Neuropathy, Hereditary Sensory And Autonomic, Adult-onset, With Anosmia
    phenotype-disease2:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: hpo.orphanet
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (HP)  
            scopes: hpo.phenotype_related_to_disease.hpo_id
          header: application/x-www-form-urlencoded
        inputs:
        - id: HP
          semantic: PhenotypicFeature
        outputs:
        - id: ORPHANET
          semantic: Disease
        predicate: phenotype_of
        source: "infores:hpo-annotations"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/orphanet"
        # testExamples:
        #   - qInput: "HP:0000224"          ## Hypogeusia
        #     oneOutput: "ORPHANET:99857"   ## Secondary Syringomyelia
    chemical-disease:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: ctd.mesh
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"  ## no prefix
            scopes: ctd.chemical_related_to_disease.mesh_chemical_id
          header: application/x-www-form-urlencoded
        inputs:
        - id: MESH
          semantic: SmallMolecule
        outputs:
        - id: MESH
          semantic: Disease
        predicate: related_to
        source: "infores:ctd"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/ctd-mesh-disease"
        # testExamples:
        #   - qInput: "MESH:D000655"      ## Amodiaquine
        #     oneOutput: "MESH:D008288"   ## Malaria (maps to MONDO:0005136)
    chemical-disease2:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: ctd.omim
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"    ## no prefix
            scopes: ctd.chemical_related_to_disease.mesh_chemical_id
          header: application/x-www-form-urlencoded
        inputs:
        - id: MESH
          semantic: SmallMolecule
        outputs:
        - id: OMIM
          semantic: Disease
        predicate: related_to
        source: "infores:ctd"
        response_mapping: 
          "$ref": "#/components/x-bte-response-mapping/ctd-omim-disease"  
        # testExamples:
        #   - qInput: "MESH:D000655"     ## Amodiaquine
        #     oneOutput: "OMIM:248310"   ## PLASMODIUM FALCIPARUM BLOOD INFECTION LEVEL (maps to MONDO:0009553)
############################################################################
    ## - there's also disease_ontology info (ancestors, children, descendants, parents)
    ## - there's also mondo info (ancestors, descendants)
    ## - mondo info we're not including:
    ##     - do we want to keep or remove parent/children relationships?
    ##     - part_of_progression_of_disease (only 2 disease-disease relationships)
    ##     - has_modifier (something is off here, shouldn't be mondo prefix...)
    ##     - excluded_subClassOf (something is off here, I'm not sure what that means)
    ##     - disjoint from (this is a negation / NOT relationship)
    ## commenting out subclass relationships due to automatic ID/node-expansion for MONDO terms
    # has_subclass:
    #   - supportBatch: true
    #     inputSeparator: ","
    #     parameters:
    #       fields: mondo.children
    #       size: 1000  ## note the size limit
    #     requestBody:
    #       body:
    #         q: "{inputs[0]}"  ## HAS PREFIX (MONDO)
    #         scopes: mondo.mondo
    #       header: application/x-www-form-urlencoded
    #     inputs:
    #     - id: MONDO
    #       semantic: Disease
    #     outputs:
    #     - id: MONDO
    #       semantic: Disease
    #     predicate: superclass_of  ## this is the inverse of subclass_of right now
    #     ## relation: "has children"?
    #     source: "infores:mondo"
    #     response_mapping:
    #       "$ref": "#/components/x-bte-response-mapping/has_subclass"
    #     # testExamples:
    #     #   - qInput: "MONDO:0002494"      ## substance-related disorder
    #     #     oneOutput: "MONDO:0021698"   ## alcohol-related disorders          
    # subclass_of:
    #   - supportBatch: true
    #     inputSeparator: ","
    #     parameters:
    #       fields: mondo.parents
    #       size: 1000  ## note the size limit
    #     requestBody:
    #       body:
    #         q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
    #         scopes: mondo.mondo
    #       header: application/x-www-form-urlencoded
    #     inputs:
    #     - id: MONDO
    #       semantic: Disease
    #     outputs:
    #     - id: MONDO
    #       semantic: Disease
    #     predicate: subclass_of
    #     ## relation: "has parents"?
    #     source: "infores:mondo"
    #     response_mapping:
    #       "$ref": "#/components/x-bte-response-mapping/subclass_of"
    #     # testExamples:
    #     #   - qInput: "MONDO:0002494"      ## substance-related disorder
    #     #     oneOutput: "MONDO:0002025"   ## psychiatric disorder
    predisposes_towards:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.predisposes_towards.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: contributes_to  ## maps to "MONDO:predisposes_towards"
        ## could use more specific biolink predicate like predisposes??
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/predisposes_towards"
        # testExamples:
        #   - qInput: "MONDO:0010940"      ## inherited susceptibility to asthma
        #     oneOutput: "MONDO:0004979"   ## asthma
    predisposes_towards-rev:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.predisposes_towards.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: contribution_from
        ## inverse of contributes_to, which is mapped to "MONDO:predisposes_towards"
        ## no relation then...
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0004979"      ## asthma
        #     oneOutput: "MONDO:0010940"   ## inherited susceptibility to asthma
    disease_shares_features_of:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.disease_shares_features_of.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: similar_to  ## could biolink have a more specific predicate?
        ##   note that relation maps to biolink:related_to right now...
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_shares_features_of"
        # testExamples:
        #   - qInput: "MONDO:0008711"      ## Goodman syndrome
        #     oneOutput: "MONDO:0019012"   ## Carpenter syndrome
    disease_shares_features_of-rev:
    ## checked and inverse relationship doesn't exist already in the data
    ##   for example, the record for Carpenter syndrome doesn't have disease_shares_features_of
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.disease_shares_features_of.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: similar_to  ## could biolink have a more specific predicate?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0019012"      ## Carpenter syndrome
        #     oneOutput: "MONDO:0008711"   ## Goodman syndrome
    disease_has_major_feature:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.disease_has_major_feature.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: has_part  ## maps to "MONDO:disease_has_major_feature"
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_has_major_feature"
        # testExamples:
        #   - qInput: "MONDO:0015140"      ## early-onset autosomal dominant Alzheimer disease
        #     oneOutput: "MONDO:0001627"   ## dementia (disease)
    disease_has_major_feature-rev:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.disease_has_major_feature.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: part_of  ## could biolink have a more specific predicate?
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0001627"      ## dementia (disease)
        #     oneOutput: "MONDO:0015140"   ## early-onset autosomal dominant Alzheimer disease
    disease_has_feature:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.disease_has_feature.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: has_part  ## no biolink mapping...
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_has_feature"
        # testExamples:
        #   - qInput: "MONDO:0005796"      ## HIV enteropathy
        #     oneOutput: "MONDO:0005020"   ## intestinal disease
    disease_has_feature-rev:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.disease_has_feature.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: part_of
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0005020"      ## intestinal disease
        #     oneOutput: "MONDO:0005796"   ## HIV enteropathy
    disease_causes_feature:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.disease_causes_feature.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: causes  ## maps to "MONDO:disease_causes_feature"
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_causes_feature"
        # testExamples:
        #   - qInput: "MONDO:0000490"      ## glomerulosclerosis
        #     oneOutput: "MONDO:0001106"   ## kidney failure
    disease_causes_feature-rev:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.disease_causes_feature.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: caused_by
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0001106"      ## kidney failure
        #     oneOutput: "MONDO:0000490"   ## glomerulosclerosis
    disease_arises_from_feature:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.disease_arises_from_feature.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: caused_by
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/disease_arises_from_feature"
          # testExamples:
          #   - qInput: "MONDO:0009346"      ## histidinuria due to a renal tubular defect
          #     oneOutput: "MONDO:0021568"   ## renal tubule disease
    disease_arises_from_feature-rev:
      - supportBatch: true
        inputSeparator: ","
        parameters:
          fields: mondo.mondo
          size: 1000  ## note the size limit
        requestBody:
          body:
            q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
            scopes: mondo.disease_arises_from_feature.mondo
          header: application/x-www-form-urlencoded
        inputs:
        - id: MONDO
          semantic: Disease
        outputs:
        - id: MONDO
          semantic: Disease
        predicate: causes
        source: "infores:mondo"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo"
        # testExamples:
        #   - qInput: "MONDO:0021568"      ## renal tubule disease
        #     oneOutput: "MONDO:0009346"   ## histidinuria due to a renal tubular defect
