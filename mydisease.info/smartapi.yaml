openapi: 3.0.0
info:
  contact:
    email: help@biothings.io
    name: Chunlei Wu
    x-id: https://github.com/newgene
    x-role: responsible developer
  x-translator:
    component: KP
    team:
      - Service Provider
  description: Documentation of the MyDisease.info disease query web services.  Learn
    more about [mydisease.info](http://mydisease.info/)
  termsOfService: http://mydisease.info/terms
  title: MyDisease.info API
  version: '1.0'
servers:
- description: Production server
  url: http://mydisease.info/v1
tags:
- name: disease
- name: annotation
- name: query
- name: translator
- name: biothings
paths:
  "/disease":
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple disease IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/Disease"
                type: array
          description: A list of matching disease objects
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: For a list of disease IDs, return the matching disease object
      tags:
      - disease
  "/disease/{diseaseid}":
    get:
      parameters:
      - description: Retrieve disease objects based on ID
        example: MONDO:0016575
        in: path
        name: diseaseid
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Disease"
          description: A matching disease object
        '404':
          description: A response indicating an unknown disease ID
      summary: Retrieve disease objects based on ID
      tags:
      - disease
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/callback"
        in: query
        name: callback
      responses:
        '200':
          description: mydisease.info metadata object
      summary: Get metadata about the data available from mydisease.info
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/search"
        name: search
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/prefix"
        name: prefix
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          description: mydisease.info metadata fields object
      summary: Get metadata about the data fields available from a mydisease.info
        chem object
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - description: 'Query string.  The detailed query syntax can be found from our
          [docs](http://mydisease.info).  Examples: "cancer", "primary ciliary dyskinesia",
          "DOID:9562"'
        example: cancer
        in: query
        name: q
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/facet_size"
        name: facet_size
      - "$ref": "#/components/parameters/sort"
        name: sort
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/facets"
        name: facets
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/from"
        name: from
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryResult"
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make disease queries and return matching disease hits. Supports JSONP
        and CORS as well.
      tags:
      - query
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryPOSTResult"
          description: Query response objects with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make batch disease queries and return matching disease hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/disease-gene"
      - "$ref": "#/components/x-bte-kgs-operations/disease-variant"
      - "$ref": "#/components/x-bte-kgs-operations/disease-phenotype"
      - "$ref": "#/components/x-bte-kgs-operations/disease-phenotype2"
      - "$ref": "#/components/x-bte-kgs-operations/disease-phenotype3"  ## for covid_phenotypes
      - "$ref": "#/components/x-bte-kgs-operations/disease-chemical"
      - "$ref": "#/components/x-bte-kgs-operations/disease-chemical2"
#       - "$ref": "#/components/x-bte-kgs-operations/disease-pathway"
#       - "$ref": "#/components/x-bte-kgs-operations/disease-pathway2"
      - "$ref": "#/components/x-bte-kgs-operations/gene-disease"
      - "$ref": "#/components/x-bte-kgs-operations/variant-disease"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype-disease"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype-disease2"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype-disease3"  ## for covid_phenotypes
      - "$ref": "#/components/x-bte-kgs-operations/chemical-disease"
      - "$ref": "#/components/x-bte-kgs-operations/chemical-disease2"
#       - "$ref": "#/components/x-bte-kgs-operations/pathway-disease"
#       - "$ref": "#/components/x-bte-kgs-operations/pathway-disease2"
      - "$ref": "#/components/x-bte-kgs-operations/has_subclass"
      - "$ref": "#/components/x-bte-kgs-operations/subclass_of"
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned disease object. If "true" or
        "1", all fields will be collapsed into a single level deep object (all nested
        objects will be a single level deep, using dotfield notation to signify the
        nested structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching disease hit(s). The supported
        field names can be found from any disease object or from the /metadata/fields
        endpoint. If "fields=all", all available fields will be returned. Type: string
        (list). Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching disease hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching disease hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    Disease:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - "$ref": "#/components/schemas/Disease"
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            "$ref": "#/components/schemas/Disease"
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-response-mapping:
    disease-gene:
      NCBIGene: disgenet.genes_related_to_disease.gene_id
      pubmed: disgenet.genes_related_to_disease.pubmed
    disease-variant:
      DBSNP: disgenet.variants_related_to_disease.rsid
      pubmed: disgenet.variants_related_to_disease.pubmed
    disease-phenotype:
      HP: hpo.phenotype_related_to_disease.hpo_id
      ## note: there are 6 reference-related fields: isbn_refs, pmid_refs, website_refs, decipher_refs, omim_refs, orphanet_refs
      pubmed: hpo.phenotype_related_to_disease.pmid_refs
      ## evidence is evidence codes (IEA, TAS, PCS)
      evidence: hpo.phenotype_related_to_disease.evidence
      ## note: there are 4 frequency-related fields: hp_freq, numeric_freq, freq_numerator, freq_denominator 
      frequency: hpo.phenotype_related_to_disease.numeric_freq
    disease-phenotype2:
      HP: covid_phenotypes.hp
    disease-chemical:
      MESH: ctd.chemical_related_to_disease.mesh_chemical_id
      ## note: evidence has two values, 'marker/mechanism' or 'therapeutic'
      evidence: ctd.chemical_related_to_disease.direct_evidence
      pubmed: ctd.chemical_related_to_disease.pubmed 
#     disease-pathway:  
#       REACT: ctd.pathway_related_to_disease.react_pathway_id
#     disease-pathway2:  
#       KEGG: ctd.pathway_related_to_disease.kegg_pathway_id
    umls:
      UMLS: disgenet.xrefs.umls
    omim:
      OMIM: hpo.omim
    orphanet:  ## added for phenotype-disease2 operation
      ORPHANET: hpo.orphanet       
    mondo:  ## added for phenotype-disease3, pathway-disease operation
      MONDO: mondo.mondo
    ctd-mesh-disease:  ## added for chemical-disease operation
      MESH: ctd.mesh
    ctd-omim-disease:  ## added for chemical-disease2 operation
      OMIM: ctd.omim
    has_subclass:
      MONDO: mondo.descendants
    subclass_of:
      MONDO: mondo.parents
  x-bte-kgs-operations:
    disease-gene:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: disgenet.genes_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"  ## example: put C0024776 here
          scopes: mondo.xrefs.umls, disgenet.xrefs.umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: Disease
      outputs:
      - id: NCBIGene
        semantic: Gene
      predicate: related_to
      source: DisGeNET
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-gene"
    disease-variant:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: disgenet.variants_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"   ## example: put C0024776 here
          scopes: mondo.xrefs.umls, disgenet.xrefs.umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: Disease
      outputs:
      - id: DBSNP
        semantic: SequenceVariant
      predicate: related_to
      source: DisGeNET
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-variant"
    disease-phenotype:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: hpo.phenotype_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"    ## example: put 246900 here
          scopes: hpo.omim
        header: application/x-www-form-urlencoded
      inputs:
      - id: OMIM
        semantic: Disease
      outputs:
      - id: HP
        semantic: PhenotypicFeature
      predicate: has_phenotype
      source: HPO Annotations
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
    disease-phenotype2:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: hpo.phenotype_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"    ## example: put 881 here
          scopes: hpo.orphanet
        header: application/x-www-form-urlencoded
      inputs:
      - id: ORPHANET
        semantic: Disease
      outputs:
      - id: HP
        semantic: PhenotypicFeature
      predicate: has_phenotype
      source: HPO Annotations
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
    disease-phenotype3:  ## covid only
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: covid_phenotypes.hp
      requestBody:
        body:
          q: "{inputs[0]}"      ## example: put MONDO:0100096 here
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: HP
        semantic: PhenotypicFeature
      predicate: has_phenotype
      source: Automat covid_phenotypes
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-phenotype2"
    disease-chemical:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: ctd.chemical_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"  ## example: put D009102 here
          scopes: ctd.mesh
        header: application/x-www-form-urlencoded
      inputs:
      - id: MESH
        semantic: Disease
      outputs:
      - id: MESH
        semantic: SmallMolecule
      predicate: related_to
      source: CTD
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-chemical"
    disease-chemical2:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: ctd.chemical_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"  ## example: put 146850 here
          scopes: ctd.omim
        header: application/x-www-form-urlencoded
      inputs:
      - id: OMIM
        semantic: Disease
      outputs:
      - id: MESH
        semantic: SmallMolecule
      predicate: related_to
      source: CTD
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-chemical"        
#     disease-pathway:  ## input is MESH Disease, example: put C536029 here
#     ## output is REACT pathway ID
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.pathway_related_to_disease
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.mesh
#         header: application/x-www-form-urlencoded
#       inputs:
#       - id: MESH
#         semantic: Disease
#       outputs:  
#       - id: REACT
#         semantic: Pathway      
#       predicate: related_to
#       source: CTD
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/disease-pathway" 
#     ## output is KEGG pathway ID
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.pathway_related_to_disease
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.mesh
#         header: application/x-www-form-urlencoded
#       inputs:
#       - id: MESH
#         semantic: Disease
#       outputs:  
#       - id: KEGG
#         semantic: Pathway      
#       predicate: related_to
#       source: CTD
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/disease-pathway2"           
#     disease-pathway2:  ## input is OMIM Disease, example: put 261515 here
#     ## output is REACT pathway ID
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.pathway_related_to_disease
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.omim
#         header: application/x-www-form-urlencoded
#       inputs:
#       - id: OMIM
#         semantic: Disease
#       outputs:  
#       - id: REACT
#         semantic: Pathway      
#       predicate: related_to
#       source: CTD
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/disease-pathway" 
#     ## output is KEGG pathway ID
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.pathway_related_to_disease
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.omim
#         header: application/x-www-form-urlencoded
#       inputs:
#       - id: OMIM
#         semantic: Disease
#       outputs:  
#       - id: KEGG
#         semantic: Pathway      
#       predicate: related_to
#       source: CTD
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/disease-pathway2"    
    gene-disease:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: disgenet.xrefs.umls
        size: '1000'  
        ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## example: put 1629 here 
          scopes: disgenet.genes_related_to_disease.gene_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: NCBIGene
        semantic: Gene
      outputs:
      - id: UMLS
        semantic: Disease
      predicate: related_to
      source: DisGeNET
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/umls"
    variant-disease:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: disgenet.xrefs.umls
        ## note that we are setting a size limit here
        size: '1000'
      requestBody:
        body:
          q: "{inputs[0]}"   ## example: put rs1001179 here   
          scopes: disgenet.variants_related_to_disease.rsid
        header: application/x-www-form-urlencoded
      inputs:
      - id: DBSNP
        semantic: SequenceVariant
      outputs:
      - id: UMLS
        semantic: Disease
      predicate: related_to
      source: DisGeNET
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/umls"
    phenotype-disease:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: hpo.omim
        ## note that we are setting a size limit here
        size: '1000'
      requestBody:
        body:
          q: "{inputs[0]}"   ## example: put HP:0000224 here 
          scopes: hpo.phenotype_related_to_disease.hpo_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: HP
        semantic: PhenotypicFeature
      outputs:
      - id: OMIM
        semantic: Disease
      predicate: phenotype_of
      source: HPO Annotations
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/omim"
    phenotype-disease2:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: hpo.orphanet
        ## note that we are setting a size limit here
        size: '1000'
      requestBody:
        body:
          q: "{inputs[0]}"   ## example: put HP:0000224 here 
          scopes: hpo.phenotype_related_to_disease.hpo_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: HP
        semantic: PhenotypicFeature
      outputs:
      - id: ORPHANET
        semantic: Disease
      predicate: phenotype_of
      source: HPO Annotations
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/orphanet"
    phenotype-disease3:  ## covid only
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.mondo
      requestBody:
        body:
          q: "{inputs[0]}"  ## example: put HP:0011899 here 
          scopes: covid_phenotypes.hp
        header: application/x-www-form-urlencoded
      inputs:
      - id: HP
        semantic: PhenotypicFeature
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: phenotype_of
      source: Automat covid_phenotypes
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/mondo"
    chemical-disease:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: ctd.mesh
        ## note that we are setting a size limit here
        size: '1000'
      requestBody:
        body:
          q: "{inputs[0]}"  ## example: put D015031 here   
          scopes: ctd.chemical_related_to_disease.mesh_chemical_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: MESH
        semantic: SmallMolecule
      outputs:
      - id: MESH
        semantic: Disease
      predicate: related_to
      source: CTD
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/ctd-mesh-disease"
    chemical-disease2:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: ctd.omim
        ## note that we are setting a size limit here
        size: '1000'
      requestBody:
        body:
          q: "{inputs[0]}"  ## example: put D015031 here
          scopes: ctd.chemical_related_to_disease.mesh_chemical_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: MESH
        semantic: SmallMolecule
      outputs:
      - id: OMIM
        semantic: Disease
      predicate: related_to
      source: CTD
      response_mapping: 
        "$ref": "#/components/x-bte-response-mapping/ctd-omim-disease"  
#     pathway-disease:  ## input is REACT pathway ID, example: put R-HSA-1280218 or R-HSA-5619084 here  
#     ## output is MESH Disease
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.mesh
#         ## note that we are setting a size limit here
#         size: '1000'
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.pathway_related_to_disease.react_pathway_id
#         header: application/x-www-form-urlencoded
#       inputs:  
#       - id: REACT
#         semantic: Pathway
#       outputs:
#       - id: MESH
#         semantic: Disease
#       predicate: related_to
#       source: CTD
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/ctd-mesh-disease"
#     ## output is OMIM Disease
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.omim
#         ## note that we are setting a size limit here
#         size: '1000'
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.pathway_related_to_disease.react_pathway_id
#         header: application/x-www-form-urlencoded
#       inputs:  
#       - id: REACT
#         semantic: Pathway
#       outputs:
#       - id: OMIM
#         semantic: Disease
#       predicate: related_to
#       source: CTD
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/ctd-omim-disease" 
#     pathway-disease2:  ## input is KEGG pathway ID, example: put hsa04360 or hsa00230 here  
#     ## output is MESH Disease
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.mesh
#         ## note that we are setting a size limit here
#         size: '1000'
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.pathway_related_to_disease.kegg_pathway_id
#         header: application/x-www-form-urlencoded
#       inputs:  
#       - id: KEGG
#         semantic: Pathway
#       outputs:
#       - id: MESH
#         semantic: Disease
#       predicate: related_to
#       source: CTD
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/ctd-mesh-disease"
#     ## output is OMIM Disease
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.omim
#         ## note that we are setting a size limit here
#         size: '1000'
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.pathway_related_to_disease.kegg_pathway_id
#         header: application/x-www-form-urlencoded
#       inputs:  
#       - id: KEGG
#         semantic: Pathway
#       outputs:
#       - id: OMIM
#         semantic: Disease
#       predicate: related_to
#       source: CTD
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/ctd-omim-disease"
    has_subclass:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.descendants
        ## note that we are setting a size limit here
        size: '1000'
      requestBody:
        body:
          q: "{inputs[0]}"  ## example: put MONDO:0002494 here
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: superclass_of  ## this is the inverse of subclass_of right now
      source: MONDO
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/has_subclass"
    subclass_of:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.parents
        ## note that we are setting a size limit here
        size: '1000'
      requestBody:
        body:
          q: "{inputs[0]}"  ## example: put MONDO:0002494 here
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: subclass_of
      source: MONDO
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/subclass_of"
