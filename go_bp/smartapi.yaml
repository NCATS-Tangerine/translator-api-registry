openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: Documentation of the Gene Ontology Biological Process query web services.
  termsOfService: https://biothings.io/about
  title: Gene Ontology Biological Process API
  version: '2020.07'
  x-translator:
    infores: "infores:biothings-go-bp"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.13"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/go_bp
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/go_bp
  x-maturity: production
tags:
- name: ontology
- name: biological process
- name: geneset
- name: query
- name: translator
- name: biothings
paths:
  "/geneset/{id}":
    get:
      parameters:
      - name: id
        in: path
        required: true
        example: "GO:0009809"
        schema:
          type: string
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: "Success"
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Geneset'
      #   '404':
      #     description: A response indicating an unknown geneset ID
      # summary: Retrieve geneset objects based on ID
      tags:
      - geneset
  "/geneset":
    post:
      parameters:
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "GO:0009809"
              - "GO:1901428"
            schema:
              type: object
              properties:
                ids:
                  description: 'multiple GO geneset IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "Success"
      tags:
      - geneset
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/dev"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/search"
      - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data fields available from a record
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - name: q
        description: Query string.
        in: query
        required: true
        example: go:"GO:0010596"
        schema:
          type: string
      - "$ref": "#/components/parameters/aggs"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/userquery"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/explain"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      parameters:
      - name: q
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            default:
            - _id
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "GO:0009809"
              - "GO:1901428"
              scopes:
              - "go"
            schema:
              type: object
              properties:
                q:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    type: string
                from:
                  type: integer
                sort:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make batch gene queries and return matching gene hits
      tags:
      - query
      x-bte-kgs-operations:
      # - $ref: '#/components/x-bte-kgs-operations/has_subclass'
      # - $ref: '#/components/x-bte-kgs-operations/subclass_of'
      - $ref: '#/components/x-bte-kgs-operations/negatively_regulates'
      - $ref: '#/components/x-bte-kgs-operations/negatively_regulated_by'
      - $ref: '#/components/x-bte-kgs-operations/positively_regulates'
      - $ref: '#/components/x-bte-kgs-operations/positively_regulated_by'
      - $ref: '#/components/x-bte-kgs-operations/regulates'
      - $ref: '#/components/x-bte-kgs-operations/regulated_by'
      - $ref: '#/components/x-bte-kgs-operations/has_part'
      - $ref: '#/components/x-bte-kgs-operations/part_of'
components:
  parameters:
    _sorted:
      name: _sorted
      in: query
      required: false
      schema:
        type: boolean
        default: true
    _source:
      name: _source
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    aggs:
      name: aggs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    allow_null:
      name: allow_null
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    always_list:
      name: always_list
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    dev:
      name: dev
      in: query
      required: false
      schema:
        type: boolean
    dotfield:
      name: dotfield
      in: query
      required: false
      schema:
        type: boolean
    explain:
      name: explain
      in: query
      required: false
      schema:
        type: boolean
    facet_size:
      name: facet_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    fetch_all:
      name: fetch_all
      in: query
      required: false
      schema:
        type: boolean
    format:
      name: format
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      required: false
      schema:
        type: string
        default: json
    from:
      name: from
      in: query
      required: false
      schema:
        type: integer
    prefix:
      name: prefix
      in: query
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      required: false
      schema:
        type: boolean
    rawquery:
      name: rawquery
      in: query
      required: false
      schema:
        type: boolean
    scroll_id:
      name: scroll_id
      in: query
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: "default: 10 objects/records in response"
      in: query
      required: false
      schema:
        type: integer
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    userquery:
      name: userquery
      in: query
      required: false
      schema:
        type: string
  # schemas:
  #   Geneset:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - $ref: '#/components/schemas/Geneset'
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           $ref: '#/components/schemas/Geneset'
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations:
  ## commenting out subclass relationships due to automatic ID/node-expansion for GO terms
    # has_subclass:
    # ## 16883 records have children: https://biothings.ncats.io/go_bp/query?q=_exists_:children
    # - supportBatch: true
    #   useTemplating: true
    #   inputs:
    #   - id: GO
    #     semantic: BiologicalProcess
    #   requestBody:
    #     body:
    #       q: "{{ queryInputs }}"
    #       scopes: _id
    #   outputs:
    #   - id: GO
    #     semantic: BiologicalProcess
    #   parameters:
    #     fields: children
    #   predicate: superclass_of  ## this is the inverse of subclass_of right now
    #   source: "infores:go"
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/has_subclass'
    #   # testExamples:
    #   #   - qInput: "GO:0089722"       ## phosphoenolpyruvate transmembrane transport
    #   #     oneOutput: "GO:1990536"    ## phosphoenolpyruvate transmembrane import into Golgi lumen
    # subclass_of:
    # ## all records but one have a "parents" field
    # - supportBatch: true
    #   useTemplating: true
    #   inputs:
    #   - id: GO
    #     semantic: BiologicalProcess
    #   requestBody:
    #     body:
    #       q: "{{ queryInputs }}"
    #       scopes: _id
    #   outputs:
    #   - id: GO
    #     semantic: BiologicalProcess
    #   parameters:
    #     fields: parents
    #   predicate: subclass_of
    #   source: "infores:go"
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/subclass_of'
    #   # testExamples:
    #   #   - qInput: "GO:0150068"       ## positive regulation of tubulin deacetylase activity
    #   #     oneOutput: "GO:0090044"    ## positive regulation of tubulin deacetylation
    negatively_regulates:
    ## 2774 records https://biothings.ncats.io/go_bp/query?q=_exists_:negatively_regulates
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: GO
        semantic: BiologicalProcess
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: GO
        semantic: BiologicalProcess
      parameters:
        fields: negatively_regulates.go
      predicate: process_negatively_regulates_process
      source: "infores:go"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/negatively_regulates'
      # testExamples:
      #   - qInput: "GO:0090272"       ## negative regulation of fibroblast growth factor production
      #     oneOutput: "GO:0090269"    ## fibroblast growth factor production
    negatively_regulated_by:
      - supportBatch: true
        useTemplating: true
        inputs:
        - id: GO
          semantic: BiologicalProcess
        requestBody:
          body:
            q: "{{ queryInputs }}"
            scopes: negatively_regulates.go
        outputs:
        - id: GO
          semantic: BiologicalProcess
        parameters:
          fields: _id
        predicate: process_negatively_regulated_by_process
        source: "infores:go"
        response_mapping:
          $ref: '#/components/x-bte-response-mapping/negatively_regulated_by'
      # testExamples:
      #   - qInput: "GO:0016126"       ## sterol biosynthetic process
      #     oneOutput: "GO:0106119"    ## negative regulation of sterol biosynthetic process
    positively_regulates:
    ## 2761 records https://biothings.ncats.io/go_bp/query?q=_exists_:positively_regulates
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: GO
        semantic: BiologicalProcess
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: GO
        semantic: BiologicalProcess
      parameters:
        fields: positively_regulates.go
      predicate: process_positively_regulates_process
      source: "infores:go"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/positively_regulates'
      # testExamples:
      #   - qInput: "GO:0090129"       ## positive regulation of synapse maturation
      #     oneOutput: "GO:0060074"    ## synapse maturation
    positively_regulated_by:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: GO
        semantic: BiologicalProcess
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: positively_regulates.go
      outputs:
      - id: GO
        semantic: BiologicalProcess
      parameters:
        fields: _id
      predicate: process_positively_regulated_by_process
      source: "infores:go"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/positively_regulated_by'
      # testExamples:
      #   - qInput: "GO:0006641"       ## triglyceride metabolic process
      #     oneOutput: "GO:0090208"    ## positive regulation of triglyceride metabolic process
    regulates:
    ## 3207 records https://biothings.ncats.io/go_bp/query?q=_exists_:regulates
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: GO
        semantic: BiologicalProcess
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: GO
        semantic: BiologicalProcess
      parameters:
        fields: regulates.go
      predicate: process_regulates_process
      source: "infores:go"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/regulates'
      # testExamples:
      #   - qInput: "GO:0090016"        ## regulation of leaflet formation 
      #     oneOutput: "GO:0090014"     ## leaflet formation
    regulated_by:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: GO
        semantic: BiologicalProcess
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: regulates.go
      outputs:
      - id: GO
        semantic: BiologicalProcess
      parameters:
        fields: _id
      predicate: process_regulated_by_process
      source: "infores:go"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/regulated_by'
      # testExamples:
      #   - qInput: "GO:0001822"        ## kidney development
      #     oneOutput: "GO:0090183"     ## regulation of kidney development
    part_of:
    ## 4928 records https://biothings.ncats.io/go_bp/query?q=_exists_:part_of
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: GO
        semantic: BiologicalProcess
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: GO
        semantic: BiologicalProcess
      parameters:
        fields: part_of.go
      predicate: part_of
      source: "infores:go"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/part_of'
      # testExamples:
      #   - qInput: "GO:0090010"        ## transforming growth factor beta receptor signaling pathway involved in primitive streak formation
      #     oneOutput: "GO:0090009"     ## primitive streak formation
    has_part:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: GO
        semantic: BiologicalProcess
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: part_of.go
      outputs:
      - id: GO
        semantic: BiologicalProcess
      parameters:
        fields: _id
      predicate: has_part
      source: "infores:go"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_part'
      # testExamples:
      #   - qInput: "GO:0048313"        ## Golgi inheritance
      #     oneOutput: "GO:0090168"     ## Golgi reassembly
  x-bte-response-mapping:
    # has_subclass:
    #   GO: children
    # subclass_of:
    #   GO: parents
    negatively_regulates:
      GO: negatively_regulates.go
    positively_regulates:
      GO: positively_regulates.go
    regulates:
      GO: regulates.go
    negatively_regulated_by:
      GO: _id
    positively_regulated_by:
      GO: _id
    regulated_by:
      GO: _id
    part_of:
      GO: part_of.go
    has_part:
      GO: _id
