openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible organization
  description: >-
    Documentation of the BioThings API for
    [AGR](https://www.alliancegenome.org/downloads) disease associations data.
  termsOfService: https://biothings.io/about
  title: BioThings AGR API
  version: '2021-08-19'   ## data / parser may be this old...
  x-translator:
    infores: "infores:biothings-agr"
    component: KP
    team:
      - Service Provider
    biolink-version: "4.2.2"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/agr
  x-maturity: production
- url: https://biothings.test.transltr.io/agr
  description: ITRB Test server
  x-maturity: testing
- url: https://biothings.ci.transltr.io/agr
  description: ITRB CI server
  x-maturity: staging
tags:
- name: association
- name: gene
- name: disease
- name: metadata
- name: query
- name: translator
- name: x-bte
- name: biothings
paths:
  "/association/{id}":
    get:
      description: >-
        By default, this will return the complete association in JSON format. If the input is not valid,
        404 (NOT FOUND) will be returned.
        

        Optionally, you can pass a "fields" parameter to return only the annotation you want 
        (by filtering returned object fields). "fields" accepts any attributes (a.k.a fields) available 
        from the association. Multiple attributes should be separated by commas. If an attribute is not 
        available for a specific association, it will be ignored. Note that the attribute names are 
        case-sensitive.


        Just like the query service, you can also pass a "callback" parameter to make a JSONP call.
      parameters:
      - name: id
        in: path
        required: true
        example: "MGI:2386296"
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/callback"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      ## these are noted in the /spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Association'
      #   '404':
      #     description: A response indicating an unknown association ID
      tags:
      - association
  "/association":
    post:
      description: >-
        Although making simple GET requests above to our service is sufficient in most use cases, 
        there are some times you might find it easier to batch query (e.g., retrieving multiple associations). 
        Fortunately, you can also make batch queries via POST requests when you need to.
      parameters:
      - name: ids
        description: >-
          Accepts multiple association ids separated by commas. Note that currently we only take ids up to 
          1000 maximum, the rest will be omitted.


          The request body can also be used to provide these ids.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      ## these are noted in the /spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "MGI:2384568"
              - "RGD:2320289"
            schema:
              type: object
              properties:
                ids:
                  description: >-
                    Accepts multiple association ids. Note that currently we only take the input ids 
                    up to 1000 maximum, the rest will be omitted.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - association
  "/metadata":
    get:
      description: Get metadata about the data available from the API
      ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
      # parameters:
      # - "$ref": "#/components/parameters/format"
      # - "$ref": "#/components/parameters/raw"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - metadata
  "/metadata/fields":
    get:
      description: Get metadata about the data fields available from the API
      ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
      # parameters:
      # - "$ref": "#/components/parameters/format"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/search"
      # - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - metadata
  "/query":
    get:
      description: >-
        Query service. In the output, "total" in the output gives the total number 
        of matching hits, while the actual hits are returned under "hits" field.
      parameters:
      - name: q
        description: >-
          Required, passing user query. The detailed query syntax for parameter is explained 
          [here for a core BioThings 
          API](https://docs.mychem.info/en/latest/doc/chem_query_service.html#query-syntax).
        in: query
        required: true
        example: "agr.symbol:Kank2"
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/facets"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/callback"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/email"
      ## these are noted in the /spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/aggs"
      # - "$ref": "#/components/parameters/userquery"
      # - "$ref": "#/components/parameters/explain"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      description: >-
        Although making simple GET requests above to our query service is sufficient for most use cases, 
        there are times you might find it more efficient to make batch queries (e.g., retrieving data 
        for multiple inputs). Fortunately, you can also make batch queries via POST requests when you need to.


        The "query” field in the returned object indicates the matching query term. If a query term has no match, 
        it will return with a “notfound” field with the value “true”.
      parameters:
      - name: q
        description: >-
          Accepts multiple values separated by commas. Note that currently we only take the input values up to 1000 
          maximum, the rest will be omitted.


          The request body can also be used to provide these ids.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        description: >-
          Optional, specify one or more fields (separated by commas) to search. Default: _id


          The request body can also be used to provide this information.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/sort"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "Acot2"
              - "Kank2"
              scopes:
              - "agr.symbol"
            schema:
              type: object
              properties:
                q:
                  description: >-
                    Accepts multiple values separated by commas. Note that currently we only take the input values 
                    up to 1000 maximum, the rest will be omitted.
                  type: array
                  items:
                    type: string
                scopes:
                  description: >-
                    Specify one or more fields (separated by commas) to search. Default: _id
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make batch gene queries and return matching gene hits
      tags:
      - query
components:
  parameters:
    callback:
      name: callback
      description: >-
        Optional, you can pass a "callback" parameter to make a JSONP call.
      in: query
      required: false
      schema:
        type: string
    dotfield:
      name: dotfield
      description: >-
        Optional, can be used to control the format of the returned object. 
        If "dotfield" is true, the returned data object is returned flattened (no nested objects) 
        using dotfield notation for key names. Default: false.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    email:
      name: email
      description: >-
        Optional, if you are regular users of our services, we encourage you to provide us an email, 
        so that we can better track the usage or follow up with you.
      in: query
      required: false
      schema:
        type: string
    facet_size:
      name: facet_size
      description: >-
        Optional, an integer (1 <= facet_size <= 1000) that specifies how many buckets to return in a 
        [faceted query](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#faceted-queries).
      in: query
      required: false
      schema:
        type: integer
        default: 10
    facets:
      name: facets
      description: >-
        Optional, a single field or comma-separated fields to return facets, can only be used on non-free text fields. 
        E.g. “facets=chembl.molecule_properties.full_mwt”. See [examples of faceted queries for a core BioThings 
        API](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#faceted-queries).
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    fetch_all:
      name: fetch_all
      description: >-
        Optional, a boolean, which when TRUE, allows fast retrieval of all unsorted query hits. 
        The return object contains a _scroll_id field, which when passed as a parameter to the query endpoint 
        (see the scroll_id parameter), returns the next 1000 query results. Setting fetch_all = TRUE causes 
        the results to be inherently unsorted, therefore the sort parameter is ignored. For more information, 
        see [examples using fetch_all for a core BioThings 
        API](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#scrolling-queries). 
        Default: FALSE.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    fields:
      name: fields
      description: >-
        Optional, can be a comma-separated list to limit the fields returned from the object. 
        If "fields=all", all available fields will be returned.
        

        Note that it supports dot notation as well, e.g., you can pass "chebi.name". 
        Default: "fields=all". 
        The parameter "filter" is an alias for this parameter.
      in: query
      required: false
      schema:
        type: string
        default: all
    from:
      name: from
      description: >-
        Optional, the number of matching hits to skip, starting from 0. Default: 0. 
      in: query
      required: false
      schema:
        type: integer
        default: 0
    scroll_id:
      name: scroll_id
      description: >-
        Optional, a string containing the _scroll_id returned from a query request with fetch_all = TRUE. 
        Supplying a valid scroll_id will return the next 1000 unordered results. If the next results are 
        not obtained within 1 minute of the previous set of results, the scroll_id becomes stale, and a 
        new one must be obtained with another query request with fetch_all = TRUE. All other parameters are 
        ignored when the scroll_id parameter is supplied. For more information see [examples using scroll_id 
        for a core BioThings 
        API](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#scrolling-queries).
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: >-
        Optional, the maximum number of matching hits to return (with a cap of 1000 at the moment). Default: 10.
        The combination of "size" and "from" parameters can be used to get paging for a large query.
      in: query
      required: false
      schema:
        type: integer
        default: 10
    sort:
      name: sort
      description: >-
        Optional, the comma-separated fields to sort on. Prefix with "-" for descending order, otherwise in ascending order. 
        Default: sort by matching scores in descending order.
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
    # _sorted:
    #   name: _sorted
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    #     default: true
    # aggs:
    #   name: aggs
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # allow_null:
    #   name: allow_null
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # always_list:
    #   name: always_list
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # explain:
    #   name: explain
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # format:
    #   name: format
    #   description: 'controls output format of server response, currently supports:
    #     "json", "jsonld", "html". Type: string. Default: json.'
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    #     default: json
    # prefix:
    #   name: prefix
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    # raw:
    #   name: raw
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # rawquery:
    #   name: rawquery
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # search:
    #   name: search
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    # userquery:
    #   name: userquery
    #   in: query
    #   required: false
    #   schema:
    #     type: string
  ## commenting out schemas and other status codes for now
  # schemas:
  #   Association:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - $ref: '#/components/schemas/Association'
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           $ref: '#/components/schemas/Association'
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-annotations:
  ## API includes gene-disease data. ref? https://www.alliancegenome.org/help#disease
  ## - relationship meanings: https://www.alliancegenome.org/glossary
  ##   is_marker_for only had 2 Gene ID namespaces (HGNC, RGD)
  ## - Gene: Multiple ID types possible, IDs include prefix (field: _id)
  ##         - HGNC Gene ID
  ##         - Mouse Genome Database (MGI)
  ##         - Rat Genome Database (RGD)
  ##         - Saccharomyces Genome Database (SGD)
  ##         - Zebrafish Information Network (ZFIN)
  ##         - FlyBase (FB)
  ##         - WormBase (WB)
  ##         - Xenbase (Xenbase) - couldn't find later
  ##         - GO Consortium (GO) - couldn't find later
  ## - Disease: DOID ID with prefixes (field: "doid")
  ## Other fields: I don't have the full list of terms/namespaces. Would need to analyze original data to get this
  ## - date: could be usable w/ JQ processing? 
  ##         not clear what kind of date this is
  ##         biolink-model has date-related terms that can be edge-attribute ids
  ## - evidence_code: can use with "biolink:has_evidence"?
  ##   not using because BTE seems to merge values for diff diseases (in same hit)
  ##   ref? https://www.alliancegenome.org/help#docodes and https://www.alliancegenome.org/help#gocodes
  ##   - ECO:0000033 / author statement supported by traceable reference
  ##   - ECO:0000250 / sequence similarity evidence used in manual assertion
  ##   - ECO:0000270 / expression pattern evidence used in manual assertion
  ##   - ECO:0000304 / author statement supported by traceable reference used in manual assertion
  ##   - ECO:0000314 / direct assay evidence used in manual assertion
  ##   - ECO:0000315 / mutant phenotype evidence used in manual assertion
  ##   - ECO:0000501 / evidence used in automatic assertion
  ##   - ECO:0007013 / combinatorial experimental and author inference evidence used in manual assertion
  ##   - ECO:0007191 / inference by association of genotype from phenotype used in manual assertion
  ## - reference: could be usable w/ JQ processing?
  ##   - PMID rarely?
  ##   - MGI
  ## - source: string term for deeper provenance 
  ##   - Alliance
  ##   - FB
  ##   - WB
  ##   - SGD
  ## -  with_orthologs: not sure if the evidence is from this gene
  ##   - RGD
  ##   - HGNC
  ##   - ZFIN
  ##   - MGI
  #   hgnc-to-doid-isMarkerFor:
  #   ## 1769 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: HGNC
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         ## API data has prefix
  #         ## joinSafe is only needed if the delimiter isn't a comma
  #         q: "{{ queryInputs | replPrefix('HGNC') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #     ## ID field has prefix (DOID)
  #       fields: >-
  #         agr.is_marker_for.doid,
  #         agr.is_marker_for.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:9606"
  #       size: 1000
  #     predicate: biomarker_for
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/isMarkerFor-doid"
  #     testExamples:
  #       - qInput: "HGNC:10615"        ## CCL17
  #         oneOutput: "DOID:3082"      ## interstitial lung disease
  #   doid-to-hgnc-isMarkerFor:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.is_marker_for.doid
  #     outputs:
  #     - id: HGNC
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:9606"
  #       size: 1000
  #     predicate: has_biomarker
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/hgnc"
  #     testExamples:
  #       - qInput: "DOID:0080600"      ## COVID-19
  #         oneOutput: "HGNC:10626"      ## CCL27
  #   rgd-to-doid-isMarkerFor:
  #   ## 1534 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: RGD
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('RGD') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.is_marker_for.doid,
  #         agr.is_marker_for.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10116"
  #       size: 1000
  #     predicate: biomarker_for
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/isMarkerFor-doid"
  #     testExamples:
  #       - qInput: "RGD:1303018"      ## Mcm7
  #         oneOutput: "DOID:684"      ## hepatocellular carcinoma
  #   doid-to-rgd-isMarkerFor:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.is_marker_for.doid
  #     outputs:
  #     - id: RGD
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10116"
  #       size: 1000
  #     predicate: has_biomarker
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/rgd"
  #     testExamples:
  #       - qInput: "DOID:10325"         ## silicosis
  #         oneOutput: "RGD:1303058"     ## Chia
    biomarker-via-orthology_gene_disease: 
    ## NO PAGINATION: 1 gene ID won't match >~1000 gene documents
      inputs:
        category: Gene
        namespaces: 
          - prefix: HGNC   ## not including name field because SRI Node-Norm can find names for these IDs
          - prefix: MGI
            name_field: agr.symbol
          - prefix: RGD
            name_field: agr.symbol
          - prefix: ZFIN
            name_field: agr.symbol
          - prefix: FB
            name_field: agr.symbol
          - prefix: WB
            name_field: agr.symbol
          - prefix: SGD
            name_field: agr.symbol
      ## not sure if this predicate is okay for "via orthology"
      predicate: biomarker_for
      outputs:
        category: Disease
        namespaces: 
          ## not including name field because SRI Node-Norm can find names for these IDs
          - prefix: DOID
            id_field: agr.biomarker_via_orthology.doid    ## single ID, has prefix (DOID)
      request_info:
        path: "/query"   ## use same format that paths section does
        method: post     ## use same format that paths section does (lower case)
        support_batch: true
        request_body:
          q: "{{ array_of_IDs_with_prefix }}"
          scopes: _id
        parameters:
          fields: agr.biomarker_via_orthology.doid,agr.symbol
          size: 100       ## should be overestimate, shouldn't get 1 gene ID -> 100 gene documents
      provenance:   ## static format
      ## see notes above. Has "source" and evidence_code fields - use one of them? Can't use both easily...
        knowledge_level: prediction
        agent_type: not_provided
        sources:
          - id: "infores:agrkb"
            role: primary_knowledge_source
      ## NO RESPONSE MAPPING: no edge-attributes
      test_examples:
        - input_id: "HGNC:1037"        ## CFB
          output_id: "DOID:0080322"    ## polycystic kidney disease
        - input_id: "MGI:109384"       ## Atf3
          output_id: "DOID:10283"      ## prostate cancer
        - input_id: "RGD:1302977"      ## Slpil3
          output_id: "DOID:2945"       ## severe acute respiratory syndrome
        - input_id: "ZFIN:ZDB-GENE-011205-17"    ## mt-cyb
          output_id: "DOID:9352"                 ## type 2 diabetes mellitus
        - input_id: "FB:FBgn0023518"       ## trr
          output_id: "DOID:5517"           ## stomach carcinoma
        - input_id: "WB:WBGene00000149"    ## apl-1
          output_id: "DOID:11758"          ## iron deficiency anemia
        - input_id: "SGD:S000000030"       ## PRP45
          output_id: "DOID:684"            ## hepatocellular carcinoma
    biomarker-via-orthology_disease_gene:
    ## - this is a reverse operation
    ## - use pagination ("DOID:10652" has >1000 genes linked)
    ##   https://biothings.ci.transltr.io/agr/query?q=agr.biomarker_via_orthology.doid:%22DOID:10652%22
      response_field_root: hits
      inputs:
        category: Disease
        namespaces: 
          - prefix: DOID
      predicate: has_biomarker
      outputs:
        category: Gene
        ## id_field values are CURIEs with standard prefix, delimiter
        namespaces: 
          - prefix: HGNC
            id_field: _id
          - prefix: MGI
            id_field: _id
            name_field: agr.symbol
          - prefix: RGD
            id_field: _id
            name_field: agr.symbol
          - prefix: ZFIN
            id_field: _id
            name_field: agr.symbol
          - prefix: FB
            id_field: _id
            name_field: agr.symbol
          - prefix: WB
            id_field: _id
            name_field: agr.symbol
          - prefix: SGD
            id_field: _id
            name_field: agr.symbol
      request_info:
        path: "/query"
        method: post
        support_batch: true
        use_pagination: true    ## PLACEHOLDER: will add more required pagination info later
        request_body:
          q: "{{ array_of_IDs_with_prefix }}"
          scopes: agr.biomarker_via_orthology.doid
        parameters:
          fields: _id,agr.symbol
          size: 1000
          with_total: true
      provenance:
        knowledge_level: prediction
        agent_type: not_provided
        sources:
          - id: "infores:agrkb"
            role: primary_knowledge_source
      ## NO RESPONSE MAPPING: no edge-attributes
      test_examples:
        - input_id: "DOID:0080322"    ## polycystic kidney disease
          output_id: "HGNC:1043"      ## BGLAP
        - input_id: "DOID:0050758"    ## metabolic acidosis
          output_id: "MGI:109393"     ## Slc4a1
        - input_id: "DOID:3587"       ## pancreatic ductal carcinoma
          output_id: "RGD:1303018"    ## Mcm7
        - input_id: "DOID:7997"                    ## thyrotoxicosis
          output_id: "ZFIN:ZDB-GENE-011205-17"     ## mt-cyb
        - input_id: "DOID:8634"             ## prostate carcinoma in situ
          output_id: "FB:FBgn0024227"       ## aurB
        - input_id: "DOID:824"              ## periodontitis
          output_id: "WB:WBGene00000149"    ## apl-1
        - input_id: "DOID:3008"             ## invasive ductal carcinoma
          output_id: "SGD:S000000011"       ## DEP1
  #   hgnc-to-doid-isImplicatedIn:
  #   ## 4543 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: HGNC
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         ## API data has prefix
  #         ## joinSafe is only needed if the delimiter isn't a comma
  #         q: "{{ queryInputs | replPrefix('HGNC') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #     ## ID field has prefix (DOID)
  #       fields: >-
  #         agr.is_implicated_in.doid,
  #         agr.is_implicated_in.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:9606"
  #       size: 1000
  #     ## agr meaning: "some variant of the gene is shown to function in causing or 
  #     ##               modifying a disease (for human) or a disease model state."
  #     ## maybe contributes_to would work too? 
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/isImplicatedIn-doid"
  #     testExamples:
  #       - qInput: "HGNC:1043"          ## BGLAP
  #         oneOutput: "DOID:11249"      ## vitamin K deficiency bleeding
  #   doid-to-hgnc-isImplicatedIn:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.is_implicated_in.doid
  #     outputs:
  #     - id: HGNC
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:9606"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/hgnc"
  #     testExamples:
  #       - qInput: "DOID:13564"       ## aspergillosis
  #         oneOutput: "HGNC:10500"    ## S100B
  #   mgi-to-doid-isImplicatedIn:
  #   ## 2010 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: MGI
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('MGI') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.is_implicated_in.doid,
  #         agr.is_implicated_in.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10090"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/isImplicatedIn-doid"
  #     testExamples:
  #       - qInput: "MGI:109393"           ## Slc4a1
  #         oneOutput: "DOID:0110919"      ## hereditary spherocytosis type 4
  #   doid-to-mgi-isImplicatedIn:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.is_implicated_in.doid
  #     outputs:
  #     - id: MGI
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10090"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/mgi"
  #     testExamples:
  #       - qInput: "DOID:0110354"      ## retinitis pigmentosa 19
  #         oneOutput: "MGI:109424"     ## Abca4
  #   rgd-to-doid-isImplicatedIn:
  #   ## 881 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: RGD
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('RGD') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.is_implicated_in.doid,
  #         agr.is_implicated_in.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10116"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/isImplicatedIn-doid"
  #     testExamples:
  #       - qInput: "RGD:1305332"       ## Mdm2
  #         oneOutput: "DOID:2055"      ## post-traumatic stress disorder
  #   doid-to-rgd-isImplicatedIn:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.is_implicated_in.doid
  #     outputs:
  #     - id: RGD
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10116"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/rgd"
  #     testExamples:
  #       - qInput: "DOID:224"           ## transient cerebral ischemia
  #         oneOutput: "RGD:1305332"     ## Mdm2
  #   zfin-to-doid-isImplicatedIn:
  #   ## 401 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: ZFIN
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('ZFIN') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.is_implicated_in.doid,
  #         agr.is_implicated_in.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:7955"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/isImplicatedIn-doid"
  #     testExamples:
  #       - qInput: "ZFIN:ZDB-GENE-000208-18"     ## urod
  #         oneOutput: "DOID:5230"                ## hepatoerythropoietic porphyria
  #   doid-to-zfin-isImplicatedIn:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.is_implicated_in.doid
  #     outputs:
  #     - id: ZFIN
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:7955"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/zfin"
  #     testExamples:
  #       - qInput: "DOID:3191"                     ## nemaline myopathy
  #         oneOutput: "ZFIN:ZDB-GENE-000322-1"     ## actc1b
  #   fb-to-doid-isImplicatedIn:
  #   ## 640 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: FB
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('FB') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.is_implicated_in.doid,
  #         agr.is_implicated_in.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:7227"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/isImplicatedIn-doid"
  #     testExamples:
  #       - qInput: "FB:FBgn0024320"     ## Npc1a
  #         oneOutput: "DOID:14504"      ## Niemann-Pick disease
  #   doid-to-fb-isImplicatedIn:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.is_implicated_in.doid
  #     outputs:
  #     - id: FB
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:7227"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/fb"
  #     testExamples:
  #       - qInput: "DOID:0080598"          ## Kleefstra syndrome 2
  #         oneOutput: "FB:FBgn0023518"     ## trr
  #   wb-to-doid-isImplicatedIn:
  #   ## 275 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: WB
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('WB') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.is_implicated_in.doid,
  #         agr.is_implicated_in.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:6239"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/isImplicatedIn-doid"
  #     testExamples:
  #       - qInput: "WB:WBGene00000227"    ## atm-1
  #         oneOutput: "DOID:12704"        ## ataxia telangiectasia
  #   doid-to-wb-isImplicatedIn:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.is_implicated_in.doid
  #     outputs:
  #     - id: WB
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:6239"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/wb"
  #     testExamples:
  #       - qInput: "DOID:14503"               ## neuronal ceroid lipofuscinosis
  #         oneOutput: "WB:WBGene00000539"     ## cln-3.1
  #   sgd-to-doid-isImplicatedIn:
  #   ## 307 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: SGD
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('SGD') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.is_implicated_in.doid,
  #         agr.is_implicated_in.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:559292"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/isImplicatedIn-doid"
  #     testExamples:
  #       - qInput: "SGD:S000000027"    ## MYO4
  #         oneOutput: "DOID:1909"      ## melanoma
  #   doid-to-sgd-isImplicatedIn:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.is_implicated_in.doid
  #     outputs:
  #     - id: SGD
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:559292"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: knowledge_assertion
  #     agent_type: manual_agent
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/sgd"
  #     testExamples:
  #       - qInput: "DOID:10629"          ## microphthalmia
  #         oneOutput: "SGD:S000000037"     ## CYC3
  #   hgnc-to-doid-implicatedViaOrthology:
  #   ## 4012 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: HGNC
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         ## API data has prefix
  #         ## joinSafe is only needed if the delimiter isn't a comma
  #         q: "{{ queryInputs | replPrefix('HGNC') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #     ## ID field has prefix (DOID)
  #       fields: >-
  #         agr.implicated_via_orthology.doid,
  #         agr.implicated_via_orthology.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:9606"
  #       size: 1000
  #     ## agr meaning: "some variant of the gene is shown to function in causing or 
  #     ##               modifying a disease (for human) or a disease model state."
  #     ## not sure if this predicate is okay for "via orthology"
  #     ## maybe contributes_to would work too? 
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/implicatedViaOrthology-doid"
  #     testExamples:
  #       - qInput: "HGNC:1043"            ## BGLAP
  #         oneOutput: "DOID:0050328"      ## congenital hypothyroidism
  #   doid-to-hgnc-implicatedViaOrthology:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.implicated_via_orthology.doid
  #     outputs:
  #     - id: HGNC
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:9606"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/hgnc"
  #     testExamples:
  #       - qInput: "DOID:11476"      ## osteoporosis
  #         oneOutput: "HGNC:1043"    ## BGLAP
  #   mgi-to-doid-implicatedViaOrthology:
  #   ## 5953 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: MGI
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('MGI') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.implicated_via_orthology.doid,
  #         agr.implicated_via_orthology.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10090"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/implicatedViaOrthology-doid"
  #     testExamples:
  #       - qInput: "MGI:109393"         ## Slc4a1
  #         oneOutput: "DOID:14219"      ## renal tubular acidosis
  #   doid-to-mgi-implicatedViaOrthology:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.implicated_via_orthology.doid
  #     outputs:
  #     - id: MGI
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10090"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/mgi"
  #     testExamples:
  #       - qInput: "DOID:589"          ## congenital hemolytic anemia
  #         oneOutput: "MGI:109393"     ## Slc4a1
  #   rgd-to-doid-implicatedViaOrthology:
  #   ## 5862 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: RGD
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('RGD') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.implicated_via_orthology.doid,
  #         agr.implicated_via_orthology.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10116"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/implicatedViaOrthology-doid"
  #     testExamples:
  #       - qInput: "RGD:11414885"       ## Hoxa1
  #         oneOutput: "DOID:12849"      ## autistic disorder
  #   doid-to-rgd-implicatedViaOrthology:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.implicated_via_orthology.doid
  #     outputs:
  #     - id: RGD
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:10116"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/rgd"
  #     testExamples:
  #       - qInput: "DOID:0050682"        ## Athabaskan brainstem dysgenesis syndrome
  #         oneOutput: "RGD:11414885"     ## Hoxa1
  #   zfin-to-doid-implicatedViaOrthology:
  #   ## 6865 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: ZFIN
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('ZFIN') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.implicated_via_orthology.doid,
  #         agr.implicated_via_orthology.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:7955"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/implicatedViaOrthology-doid"
  #     testExamples:
  #       - qInput: "ZFIN:ZDB-GENE-010801-1"     ## tnfsf10l
  #         oneOutput: "DOID:0050685"            ## small cell carcinoma
  #   doid-to-zfin-implicatedViaOrthology:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.implicated_via_orthology.doid
  #     outputs:
  #     - id: ZFIN
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:7955"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/zfin"
  #     testExamples:
  #       - qInput: "DOID:0050709"                  ## early infantile epileptic encephalopathy
  #         oneOutput: "ZFIN:ZDB-GENE-010608-3"     ## neurod2
  #   fb-to-doid-implicatedViaOrthology:
  #   ## 3744 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: FB
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('FB') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.implicated_via_orthology.doid,
  #         agr.implicated_via_orthology.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:7227"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/implicatedViaOrthology-doid"
  #     testExamples:
  #       - qInput: "FB:FBgn0023508"    ## Ocrl
  #         oneOutput: "DOID:1056"      ## oculocerebrorenal syndrome
  #   doid-to-fb-implicatedViaOrthology:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.implicated_via_orthology.doid
  #     outputs:
  #     - id: FB
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:7227"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/fb"
  #     testExamples:
  #       - qInput: "DOID:0050699"          ## Dent disease
  #         oneOutput: "FB:FBgn0023508"     ## Ocrl
  #   wb-to-doid-implicatedViaOrthology:
  #   ## 3739 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: WB
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('WB') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.implicated_via_orthology.doid,
  #         agr.implicated_via_orthology.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:6239"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/implicatedViaOrthology-doid"
  #     testExamples:
  #       - qInput: "WB:WBGene00000148"    ## aph-2
  #         oneOutput: "DOID:11054"        ## urinary bladder cancer
  #   doid-to-wb-implicatedViaOrthology:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.implicated_via_orthology.doid
  #     outputs:
  #     - id: WB
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:6239"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/wb"
  #     testExamples:
  #       - qInput: "DOID:12387"               ## nephrogenic diabetes insipidus
  #         oneOutput: "WB:WBGene00000170"     ## aqp-2
  #   sgd-to-doid-implicatedViaOrthology:
  #   ## 622 records
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: SGD
  #       semantic: Gene
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('SGD') }}"
  #         scopes: _id
  #     outputs:
  #     - id: DOID
  #       semantic: Disease
  #     parameters:
  #       fields: >-
  #         agr.implicated_via_orthology.doid,
  #         agr.implicated_via_orthology.term_name,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:559292"
  #       size: 1000
  #     predicate: gene_associated_with_condition
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/implicatedViaOrthology-doid"
  #     testExamples:
  #       - qInput: "SGD:S000000010"       ## CYS3
  #         oneOutput: "DOID:0090142"      ## cystathioninuria
  #   doid-to-sgd-implicatedViaOrthology:
  #   - supportBatch: true
  #     useTemplating: true
  #     inputs:
  #     - id: DOID
  #       semantic: Disease
  #     requestBody:
  #       body:
  #         q: "{{ queryInputs | replPrefix('DOID') }}"
  #         scopes: agr.implicated_via_orthology.doid
  #     outputs:
  #     - id: SGD
  #       semantic: Gene
  #     parameters:
  #       fields: >-
  #         _id,
  #         agr.symbol
  #       filter: agr.taxon:"NCBITaxon:559292"
  #       size: 1000
  #     predicate: condition_associated_with_gene
  #     source: "infores:agrkb"
  #     knowledge_level: prediction
  #     agent_type: not_provided
  #     response_mapping:
  #       "$ref": "#/components/x-bte-response-mapping/sgd"
  #     testExamples:
  #       - qInput: "DOID:0080411"          ## familial adenomatous polyposis 3
  #         oneOutput: "SGD:S000000013"     ## NTG1
  # x-bte-response-mapping:
  #   isMarkerFor-doid:
  #     DOID: agr.is_marker_for.doid
  #     input_name: agr.symbol
  #     output_name: agr.is_marker_for.term_name
  #   isImplicatedIn-doid:
  #     DOID: agr.is_implicated_in.doid
  #     input_name: agr.symbol
  #     output_name: agr.is_implicated_in.term_name
  #   implicatedViaOrthology-doid:
  #     DOID: agr.implicated_via_orthology.doid
  #     input_name: agr.symbol
  #     output_name: agr.implicated_via_orthology.term_name
  #   hgnc:
  #     HGNC: _id
  #     output_name: agr.symbol
  #   mgi:
  #     MGI: _id
  #     output_name: agr.symbol
  #   rgd:
  #     RGD: _id
  #     output_name: agr.symbol
  #   zfin:
  #     ZFIN: _id
  #     output_name: agr.symbol
  #   fb:
  #     FB: _id
  #     output_name: agr.symbol
  #   wb:
  #     WB: _id
  #     output_name: agr.symbol
  #   sgd:
  #     SGD: _id
  #     output_name: agr.symbol
